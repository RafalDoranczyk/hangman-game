{"version":3,"sources":["theme/theme.js","components/Layout/Layout.js","components/Reusable/Hangman/Hangman.js","components/Reusable/Buttons/StartGameButton.js","components/StartPage/StartPage.js","components/InGamePage/DrawingAndInfoSection/HangmanDrawing/HangmanDrawing.js","components/InGamePage/DrawingAndInfoSection/GameInfo/GameInfo.js","components/InGamePage/DrawingAndInfoSection/DrawingAndInfoSection.js","components/InGamePage/PhraseToGuessSection/Letters/Letter/Letter.js","components/InGamePage/PhraseToGuessSection/Letters/Letters.js","components/InGamePage/PhraseToGuessSection/PhraseToGuessSection.js","components/InGamePage/LettersToClickSection/LetterToClick/LetterToClick.js","components/InGamePage/LettersToClickSection/LettersToClickSection.js","components/InGamePage/InGamePage.js","components/EndGamePage/EndGamePage.js","containers/App.js","serviceWorker.js","index.js"],"names":["theme","colors","white","black","gray","deep","green","red","deepRed","winGamePhrase","device","iPad","GlobalStyle","createGlobalStyle","_templateObject","_ref","_ref2","LayoutWrapper","styled","div","_templateObject2","props","Layout","_ref3","isGameInProgress","children","react_default","a","createElement","styled_components_browser_esm","Fragment","StylesForAllParts","Hangman_templateObject","GallowsBasis","Hangman_templateObject2","GallowBranch","_templateObject3","GallowTopBranch","_templateObject4","GallowsNoose","_templateObject5","mistakesLeft","Head","_templateObject6","_ref4","manFromTop","concat","_ref5","_ref6","isGameEnded","Body","_templateObject7","_ref7","_ref8","_ref9","StylesForArms","_templateObject8","LeftArm","_templateObject9","_ref10","_ref11","_ref12","RightArm","_templateObject10","_ref13","_ref14","_ref15","StylesForLegs","_templateObject11","LeftLeg","_templateObject12","_ref16","_ref17","_ref18","RightLeg","_templateObject13","_ref19","_ref20","_ref21","Hangman","_ref22","isGameWon","ButtonStyle","button","StartGameButton_templateObject","disabled","StartPageWrapper","StartPage_templateObject2","HangmanWrapper","StartPage_templateObject3","keyframes","StartPage_templateObject","StartGameButtonStyle","StartPage_templateObject4","StartPage","startGame","phraseToGuess","text","length","Reusable_Hangman_Hangman","onClick","HangmanDrawingWrapper","HangmanDrawing_templateObject","HangmanDrawing_templateObject2","HangmanDrawingSection","HangmanDrawing_HangmanWrapper","GameInfoWrapper","GameInfo_templateObject","Info","GameInfo_templateObject2","Category","p","GameInfo_templateObject3","Hint","GameInfo_templateObject4","MistakesLeft","GameInfo_templateObject5","TimeToNextLetterWrapper","GameInfo_templateObject6","GameInfoSection","timeToNextLetter","phraseInfo","category","hint","DrawingAndInfoSectionWrapper","DrawingAndInfoSection_templateObject","DrawingAndInfoSection","HangmanDrawing","GameInfo","LetterWrapper","span","Letter_templateObject","Letter","letterObj","isLetterShowed","letter","LettersWrapper","Letters_templateObject","BreakLine","Letters_templateObject2","Letters","letters","map","Letters_Letter_Letter","key","id","PhraseToGuessWrapper","PhraseToGuessSection_templateObject","PhraseToGuess","PhraseToGuessSection_Letters_Letters","LetterToClick_templateObject","isClicked","isHit","LetterToClick","clickLetter","LetterToClick_Letter","LettersToClickSection_templateObject","LettersToClick","lettersToClick","letterToClick","LettersToClickSection_LetterToClick_LetterToClick","e","toUpperCase","LettersToClickSection_LettersWrapper","InGamePageWrapper","InGamePage_templateObject","InGamePage","InGamePage_DrawingAndInfoSection_DrawingAndInfoSection","PhraseToGuessSection","LettersToClickSection","EndGameWrapper","EndGamePage_templateObject","Icon","EndGamePage_templateObject2","ButtonEndGameStyle","EndGamePage_templateObject3","EndGamePage","titbitMessage","titbit","winOrLoseMessage","guessedPhrase","phrase","winOrLoseContent","className","TIME_TO_NEXT_LETTER","allPhrasesFromApi","API","App","state","startGameHandler","_this","giveRandomPhraseHandler","setState","startTimeToNextLetterHandler","ID","setInterval","isSelectedLetterInPhraseHandler","selectedLetterObj","letterInPhrase","find","selectedLetter","forEach","clickOrPressKeyLetterHandler","pressedOrClickedLetter","_this$state","clickedLetter","target","textContent","index","findIndex","clearInterval","data","randomNumberForCategory","Math","floor","random","Object","keys","randomCategoryObject","entries","randomNumberForPhrase","randomPhraseObject","toConsumableArray","push","filter","fetchDataHandler","axios","get","then","response","statusText","Error","prevProps","prevState","_this2","this","allLettersAreShowed","noMistakesLeft","clearTimeout","TimeoutID","filteredLetters","autoClicked","setTimeout","_this3","document","addEventListener","removeEventListener","console","log","_this$state2","components_Layout_Layout","components_StartPage_StartPage","components_InGamePage_InGamePage","components_EndGamePage_EndGamePage","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ee91878d.chunk.js","sourcesContent":["const size = {\r\n    iPad: '767px'\r\n}\r\n\r\nexport const theme = {\r\n    colors: {\r\n        white: '#fff',\r\n        black: '#000',\r\n        gray: '#D6D6D8',\r\n        deep: '#140A25',\r\n        green: '#69a982',\r\n        red: '#6f2232',\r\n        deepRed: '#400D2A',\r\n        winGamePhrase: '#fed123',\r\n    },\r\n    device: {\r\n        iPad: size.iPad\r\n    },\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types'\r\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\r\nimport { theme } from '../../theme/theme';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\nbody{\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n}\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-weight: normal;\r\n \r\n}\r\n* ::after, * ::before{\r\n    position: absolute;\r\n    content: '';\r\n}\r\n\r\n\r\n:root{\r\n    color:${({ theme }) => theme.colors.black};\r\n    font-size: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n}\r\n`\r\nconst LayoutWrapper = styled.div`\r\nposition: absolute;\r\ntop: 50%;\r\nleft: 50%;\r\nheight: 100%;\r\nwidth: 100%;\r\ntransform: translate(-50%,-50%);\r\noverflow: hidden;\r\n\r\n@media (min-width: ${props => props.theme.device.iPad}){\r\n    height: 70%;\r\n    width: 70%;\r\n}\r\n\r\n`\r\n\r\nconst Layout = ({ isGameInProgress, children }) =>\r\n    (\r\n        <ThemeProvider theme={theme}>\r\n            <>\r\n                <GlobalStyle\r\n                    isGameInProgress={isGameInProgress} />\r\n                <LayoutWrapper>\r\n                    {children}\r\n                </LayoutWrapper>\r\n            </>\r\n        </ThemeProvider>\r\n\r\n    )\r\n\r\n\r\nLayout.propTypes = {\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default Layout;","import styled from 'styled-components';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// IF U WANT TO USE THIS COMPONENT => WRAPPER FOR IT NEEDS POSITION RELATIVE, SOME WIDTH AND HEIGHT AND *{\r\n//     POSITION: ABSOLUTE\r\n//               }\r\n\r\n\r\n//HangmanDrawingParts\r\nconst StylesForAllParts = styled.div`\r\n    transition: .4s;\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n    &::after,&::before{\r\n        background-color: ${({ theme }) => theme.colors.white};\r\n    }\r\n\r\n\r\n`\r\nconst GallowsBasis = styled(StylesForAllParts)`\r\n    top: 95%;\r\n    height: .3em;\r\n    left: 5%;\r\n    width: 9em;\r\n`\r\nconst GallowBranch = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    bottom: 5%;\r\n    left: 5%;\r\n    width: .4em;\r\n    &::after{\r\n        top: 0%;\r\n        height: 4em;\r\n        left: 300%;\r\n        width: 100%;\r\n        transform: rotate(35deg);\r\n    }\r\n    `\r\nconst GallowTopBranch = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    height: .4em;\r\n    left: 5%;\r\n    width: 14em;\r\n`\r\nconst GallowsNoose = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    height: 4em;\r\n    left: calc(5% + 14em);\r\n    width: .4em;\r\n    transform: translateX(-50%);\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 6 ? '1' : '0'};\r\n\r\n`\r\n\r\nconst Head = styled(StylesForAllParts)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 4em)`};\r\n    height: 3em;\r\n    left: calc(5% + 14em);\r\n    transform: translateX(-50%);\r\n    width: 3em;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 5 ? '1' : '0'};\r\n    border: .1em solid white;\r\n    border-radius: 50%;\r\n    background-color: transparent;\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n    ::after,::before{\r\n        top: 20%;\r\n        height: 10%;\r\n        width: 10%;\r\n        border-radius: 50%;\r\n    }\r\n    ::after{\r\n        left: 25%;\r\n    \r\n    }\r\n    ::before{\r\n        right: 25%;\r\n    }\r\n`\r\nconst Body = styled(StylesForAllParts)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7em)`};\r\n    height: 4em;\r\n    left: calc(5% + 14em);\r\n    width: .3em;\r\n    transform: translateX(-50%);\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 4 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\nconst StylesForArms = styled(StylesForAllParts)`\r\n   height: .2em;\r\n   width: 2.8em;\r\n   border-radius: 30%;\r\n\r\n`\r\n\r\nconst LeftArm = styled(StylesForArms)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7.6em)`}; \r\n    left: calc(5% + 14em - 2.8em);\r\n    transform: rotate(-30deg);\r\n    transform-origin: top right;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 3 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\nconst RightArm = styled(StylesForArms)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7.6em)`}; \r\n    left: calc(5% + 14em);\r\n    transform:  rotate(30deg);\r\n    transform-origin: top left;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 2 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\nconst StylesForLegs = styled(StylesForAllParts)`\r\n    border-radius: 30%;\r\n    width: .2em;\r\n    height: 3.2em;\r\n   \r\n`\r\nconst LeftLeg = styled(StylesForLegs)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7em + 4em)`};\r\n    left: calc(5% + 14em);\r\n    transform: translateX(-50%)  rotate(50deg);\r\n    transform-origin: top right;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 1 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\nconst RightLeg = styled(StylesForLegs)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7em + 4em)`};\r\n    left: calc(5% + 14em - .2em);\r\n    transform: translateX(50%)  rotate(-50deg);\r\n    transform-origin: top left;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 0 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\n\r\nconst Hangman = ({ mistakesLeft, isGameEnded, isGameWon }) => {\r\n    const manFromTop = isGameEnded && isGameWon ? 'calc(30%)' : '5%';\r\n    return (\r\n        <>\r\n            <GallowsBasis />\r\n            <GallowBranch />\r\n            <GallowTopBranch />\r\n            <GallowsNoose\r\n                isGameEnded={isGameEnded}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <Head\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <Body\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <LeftArm\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <LeftLeg\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <RightArm\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <RightLeg\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nHangman.propTypes = {\r\n    mistakesLeft: PropTypes.number,\r\n}\r\n\r\nexport default Hangman;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ButtonStyle = styled.button`\r\nposition: absolute;\r\ntop: 60%;\r\nleft: 50%;\r\ntransform:translateX(-50%);\r\nheight: 3em;\r\nwidth: 8em;\r\nborder-radius: 50px;\r\nborder: none;\r\nfont-size: 1.1em;\r\nletter-spacing: 2px;\r\nbackground-color: ${({ theme, disabled }) => disabled ? theme.colors.black : theme.colors.deepRed};\r\ncolor: ${({ theme }) => theme.colors.gray};\r\ncursor: pointer;\r\ntransition: .6s linear all;\r\nbox-shadow: 0 0 5px 5px ${({ theme }) => theme.colors.black} ;\r\n:hover{\r\n    background-color: ${({ theme }) => theme.colors.red}\r\n    }\r\n\r\n`\r\n\r\nconst StartGameButton = ({ startGame, phraseToGuess, children }) => {\r\n\r\n\r\n\r\n    return (\r\n        <ButtonStyle\r\n            disabled={phraseToGuess.length > 0 ? false : true}\r\n            onClick={startGame}>\r\n            {children}\r\n        </ButtonStyle>\r\n    )\r\n}\r\n\r\n\r\nStartGameButton.propTypes = {\r\n    startGame: PropTypes.func.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\r\n}\r\n\r\nexport default StartGameButton;","import React from 'react';\r\nimport styled, { keyframes } from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Hangman from '../Reusable/Hangman/Hangman';\r\nimport { ButtonStyle } from '../Reusable/Buttons/StartGameButton';\r\n\r\n\r\nconst ShadowMove = props => keyframes`\r\n0%{\r\n    box-shadow: 0 0 1px 1px${props.theme.colors.red};\r\n}\r\n100%{\r\n    box-shadow: 0 0 8px 8px  ${props.theme.colors.deepRed};\r\n}\r\n`\r\n\r\nconst StartPageWrapper = styled.div`\r\nheight: 100%;\r\nwidth: 100%;\r\nopacity: ${({ isGameInProgress, isGameEnded }) => isGameInProgress || isGameEnded ? '0' : '1'};\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\ntransition: .4s linear all;\r\nfont-size: 1.6rem;\r\n\r\n@media (orientation: landscape) and (min-width: ${({ theme }) => theme.device.iPad}) {\r\n    font-size: 3rem;\r\n}\r\n@media (orientation: portrait) and (min-width: ${({ theme }) => theme.device.iPad}) {\r\n    font-size: 3rem;\r\n}\r\n\r\n`\r\n\r\nconst HangmanWrapper = styled.div`\r\nposition: relative;\r\nheight: 100%;\r\nwidth: 100%;\r\nbackground-color: ${({ theme }) => theme.colors.deep};\r\n*, *::after, *::before{\r\n    opacity:1;\r\n    position: absolute;\r\n    animation: ${ShadowMove} 1s linear infinite alternate;\r\n}\r\n`\r\n\r\nconst StartGameButtonStyle = styled(ButtonStyle)`\r\n@media(orientation: landscape){\r\n    top: 50%;\r\n    left: 70%;\r\n    transform: translate(-50%,-50%);\r\n}\r\n\r\n`\r\n\r\n\r\nconst StartPage = ({ isGameInProgress, startGame, isGameEnded, phraseToGuess, children }) => {\r\n    const text = phraseToGuess.length > 0 ? 'Start Game' : 'Loading...'\r\n\r\n    return (\r\n        <StartPageWrapper\r\n            isGameEnded={isGameEnded}\r\n            isGameInProgress={isGameInProgress}>\r\n            <HangmanWrapper>\r\n                <Hangman />\r\n            </HangmanWrapper>\r\n            <StartGameButtonStyle\r\n                phraseToGuess={phraseToGuess}\r\n                onClick={startGame}\r\n            >{text}\r\n            </StartGameButtonStyle>\r\n        </StartPageWrapper>\r\n    )\r\n}\r\n\r\nStartPage.propTypes = {\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n    startGame: PropTypes.func.isRequired,\r\n    isGameEnded: PropTypes.bool.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n}\r\n\r\n\r\nexport default StartPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Hangman from '../../../Reusable/Hangman/Hangman';\r\n\r\nconst HangmanDrawingWrapper = styled.div`\r\n    flex-grow: 1;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n`\r\n\r\nconst HangmanWrapper = styled.div`\r\nposition: relative;\r\nheight: 100%;\r\nwidth:100%;\r\nfont-size: 1rem;\r\nz-index: 1;\r\n\r\n@media (orientation:landscape) and (min-width: ${props => props.theme.device.iPad}){\r\n    font-size: 1.7rem;\r\n}\r\n@media (orientation:portrait) and (min-width: ${props => props.theme.device.iPad}){\r\n    font-size: 1.7rem;\r\n}\r\n*{\r\n\r\n    position: absolute;\r\n}\r\n\r\n`\r\n\r\n\r\nconst HangmanDrawingSection = ({ mistakesLeft }) => (\r\n    <HangmanDrawingWrapper>\r\n        <HangmanWrapper>\r\n            <Hangman\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n\r\n        </HangmanWrapper>\r\n\r\n\r\n    </HangmanDrawingWrapper>\r\n);\r\n\r\nHangmanDrawingSection.propTypes = {\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default HangmanDrawingSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GameInfoWrapper = styled.div`\r\n    flex-basis: 50%;\r\n    background-color: ${({ theme }) => theme.colors.deepRed};\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-end;\r\n    text-align: center;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    font-size: 1.4em;\r\n\r\nspan{\r\n    display: block;\r\n}\r\n\r\n\r\n\r\n`\r\nconst Info = styled.div`\r\n    flex-basis: 90.5%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-around;\r\n    align-items: flex-end;\r\n\r\n    @media(orientation:landscape){\r\n        flex-basis: 100%;\r\n        align-items: center;\r\n    }\r\n`\r\n\r\nconst Category = styled.p`\r\n    flex-basis: 100%;\r\n    height: 20%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-evenly;\r\n    font-weight: 700;\r\n`\r\nconst Hint = styled.p`\r\n    flex-basis: 95%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-evenly;\r\n    height: 35%;\r\n    font-weight: 700;\r\n`\r\n\r\nconst MistakesLeft = styled.div`\r\n    flex-basis: 40%;\r\n    height: 20%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: .1rem;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n    border-radius: 100px;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    position: relative;\r\n\r\n    @media (orientation: landscape){\r\n       margin-right: 40%;\r\n       height: 10%;\r\n\r\n    }\r\n    &::before{\r\n        top: 50%;\r\n        transform: translate(-90%, -50%);\r\n        left: 0;\r\n        width: 6rem;\r\n        height: 1rem;\r\n        border-radius: 20%;\r\n        background-color: ${({ theme }) => theme.colors.deep};\r\n    }\r\n    \r\n`\r\n\r\n\r\nconst TimeToNextLetterWrapper = styled.div`\r\n    flex-basis: 40%;\r\n    height: 20%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: .1rem;\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n    border-radius: 100px;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    position: relative;\r\n    &::before{\r\n        top: 100%;\r\n        transform: translate(-50%, -10%);\r\n        left: 50%;\r\n        width: 1rem;\r\n        height: 6rem;\r\n        border-radius: 20%;\r\n        background-color:${({ theme }) => theme.colors.black};\r\n    }\r\n\r\n    @media (orientation: landscape){\r\n       order: -1;\r\n       height: 10%;\r\n       margin-left: 40%;\r\n       &::before{\r\n           transform: translate(-10%,-50%);\r\n           top: 50%;\r\n           left: 100%;\r\n           width: 6rem;\r\n           height: 1rem;\r\n       }\r\n    }\r\n\r\n   \r\n`\r\n\r\nconst GameInfoSection = ({ timeToNextLetter, mistakesLeft, phraseInfo }) => {\r\n    return (\r\n        <GameInfoWrapper>\r\n            <Info>\r\n                <Category>Category <span>{phraseInfo.category}</span> </Category>\r\n                <Hint>Hint <span>{phraseInfo.hint}</span></Hint>\r\n                <MistakesLeft>{mistakesLeft}</MistakesLeft>\r\n                <TimeToNextLetterWrapper>{timeToNextLetter} </TimeToNextLetterWrapper>\r\n            </Info>\r\n        </GameInfoWrapper>\r\n    )\r\n};\r\n\r\nGameInfoSection.propTypes = {\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    phraseInfo: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\n\r\n\r\nexport default GameInfoSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport HangmanDrawing from './HangmanDrawing/HangmanDrawing';\r\nimport GameInfo from './GameInfo/GameInfo';\r\n\r\n\r\n\r\nconst DrawingAndInfoSectionWrapper = styled.div`\r\n    flex-basis: 40%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    overflow: hidden;\r\n    &::after{\r\n        top: 0;\r\n        left: 30%;\r\n        right: 47%;\r\n        height: 120%;\r\n        transform: rotate(3deg);\r\n        transform-origin: bottom right;\r\n        background-color:${({ theme }) => theme.colors.deep};\r\n    }\r\n    @media (orientation: landscape){\r\n        &::after{\r\n            display: none;\r\n        }\r\n        flex-basis: 100%;\r\n        width: 60%;\r\n    }\r\n`\r\n\r\n\r\nconst DrawingAndInfoSection = ({ timeToNextLetter, mistakesLeft, phraseInfo }) => (\r\n\r\n    <DrawingAndInfoSectionWrapper>\r\n        <HangmanDrawing\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <GameInfo\r\n            phraseInfo={phraseInfo}\r\n            mistakesLeft={mistakesLeft}\r\n            timeToNextLetter={timeToNextLetter}\r\n        />\r\n    </DrawingAndInfoSectionWrapper>\r\n);\r\n\r\n\r\nDrawingAndInfoSection.propTypes = {\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    phraseInfo: PropTypes.object.isRequired,\r\n}\r\nexport default DrawingAndInfoSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LetterWrapper = styled.span`\r\n    display: block;\r\n    height: .7em;\r\n    width: .7em;\r\n    font-size: 1.6em;\r\n    margin: 0 .8em;\r\n    color: ${({ theme, isGameWon }) => isGameWon ? theme.colors.winGamePhrase : theme.colors.gray};\r\n\r\n@media (orientation: landscape){\r\n    margin: 0 .4em;\r\n}\r\n\r\n\r\n`\r\n\r\nconst Letter = ({ letterObj, isGameWon }) => (\r\n    <LetterWrapper\r\n        isGameWon={isGameWon}>\r\n        {letterObj.isLetterShowed ? letterObj.letter : \"__\"}\r\n    </LetterWrapper>\r\n);\r\n\r\nLetter.propTypes = {\r\n    letterObj: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\nexport default Letter;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Letter from './Letter/Letter';\r\n\r\nconst LettersWrapper = styled.div`\r\n    flex-basis: 90%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    align-content: space-around;\r\n    text-align: center;\r\n`\r\n\r\nconst BreakLine = styled.div`\r\n    flex-basis: 100%;\r\n    height: 1%;\r\n`\r\n\r\n\r\n\r\nconst Letters = ({ phraseToGuess, isGameWon }) => {\r\n\r\n    const letters = phraseToGuess.map(letterObj => {\r\n        let letters;\r\n        if (letterObj.letter !== \" \") {\r\n            letters = <Letter\r\n                key={letterObj.id}\r\n                letterObj={letterObj}\r\n                isGameWon={isGameWon} />\r\n        }\r\n        else if (letterObj.letter === \" \") {\r\n            letters = <BreakLine\r\n                key={letterObj.id} />\r\n        }\r\n        return letters;\r\n    })\r\n\r\n    return (\r\n\r\n        <LettersWrapper>{letters}</LettersWrapper>\r\n    );\r\n};\r\n\r\nLetters.propTypes = {\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n}\r\n\r\nexport default Letters;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Letters from './Letters/Letters';\r\n\r\nconst PhraseToGuessWrapper = styled.div`\r\n    flex-basis: 25%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    justify-content: space-around;\r\n\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n    @media (orientation: landscape){\r\n        flex-basis: 40%;\r\n        width: 40%;\r\n    }\r\n\r\n`\r\n\r\nconst PhraseToGuess = ({ phraseToGuess, isGameWon }) => (\r\n\r\n    <PhraseToGuessWrapper>\r\n\r\n        <Letters\r\n            isGameWon={isGameWon}\r\n            phraseToGuess={phraseToGuess} />\r\n\r\n    </PhraseToGuessWrapper>\r\n\r\n);\r\n\r\nPhraseToGuess.propTypes = {\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\r\n}\r\n\r\nexport default PhraseToGuess;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Letter = styled.span`\r\n    flex-basis: 10%;\r\n    height: 15%;\r\n    margin: 1% 2%;\r\n   \r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    font-weight: 700;\r\n    transform: ${({ isClicked }) => isClicked ? 'translateY(.2rem)' : 'scale(1.1)'};  \r\n    box-shadow: ${({ isClicked, isHit, theme }) =>\r\n        isHit ? `0 .5rem 0 0 ${theme.colors.green}`\r\n            : isClicked ? `0 .5rem  0 0 ${theme.colors.red}`\r\n                : `0 0 .1rem 0 ${theme.colors.gray}`};\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n    opacity: ${({ isClicked }) => isClicked ? '.5' : '1'};\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    cursor: pointer;\r\n\r\n    :hover{\r\n    background-color: ${({ theme, isClicked }) => !isClicked && theme.colors.deepRed}\r\n    }\r\n`\r\n\r\nconst LetterToClick = ({ letter, clickLetter, isHit, isClicked, isGameEnded }) => (\r\n    <Letter\r\n        isGameEnded={isGameEnded}\r\n        isClicked={isClicked}\r\n        onClick={clickLetter}\r\n        isHit={isHit}\r\n    >\r\n        {letter}\r\n    </Letter>\r\n);\r\n\r\nLetterToClick.propTypes = {\r\n    letter: PropTypes.string.isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n    isHit: PropTypes.bool.isRequired,\r\n    isClicked: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default LetterToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport LetterToClick from './LetterToClick/LetterToClick';\r\n\r\nconst LettersWrapper = styled.div`\r\n    flex-basis: 35%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n    font-size: 1.5rem;\r\n    @media (orientation: landscape){\r\n        flex-grow: 1;\r\n        width: 40%;\r\n    }\r\n\r\n    @media (orientation: portrait) and (min-width: ${({ theme }) => theme.device.iPad}) {\r\n    font-size: 2rem;\r\n}\r\n\r\n    @media (orientation: landscape) and (min-width: ${({ theme }) => theme.device.iPad}) {\r\n    font-size: 1.6rem;\r\n}\r\n\r\n\r\n`\r\n\r\nconst LettersToClick = ({ lettersToClick, clickLetter, isGameEnded }) => {\r\n\r\n    const letters = lettersToClick.map(letterToClick => (\r\n        <LetterToClick\r\n            clickLetter={(e, key) => clickLetter(e, key)}\r\n            isClicked={letterToClick.isClicked}\r\n            key={letterToClick.letter}\r\n            isHit={letterToClick.isHit}\r\n            letter={letterToClick.letter.toUpperCase()}\r\n            isGameEnded={isGameEnded} />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper\r\n            isGameEnded={isGameEnded}>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n};\r\n\r\n\r\nLettersToClick.propTypes = {\r\n    lettersToClick: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n}\r\nexport default LettersToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport DrawingAndInfoSection from './DrawingAndInfoSection/DrawingAndInfoSection';\r\nimport PhraseToGuessSection from './PhraseToGuessSection/PhraseToGuessSection';\r\nimport LettersToClickSection from './LettersToClickSection/LettersToClickSection';\r\n\r\n\r\nconst InGamePageWrapper = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    transform: ${({ isGameInProgress, isGameEnded }) => isGameInProgress || isGameEnded ? 'translateX(0)' : 'translateX(100%)'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '.4s .4s linear all' : '.4s linear all'};\r\n    font-size: 1rem;\r\n\r\n    @media (orientation: portrait) and (min-width: ${({ theme }) => theme.device.iPad}) {\r\n    font-size: 2rem;\r\n}\r\n\r\n    @media (orientation: landscape) and (min-width: ${({ theme }) => theme.device.iPad}) {\r\n    font-size: 1.6rem;\r\n}\r\n\r\n`\r\n\r\n\r\n\r\n\r\nconst InGamePage = ({ mistakesLeft, timeToNextLetter, phraseToGuess, phraseInfo, lettersToClick, clickLetter, isGameInProgress, isGameEnded, isGameWon }) => (\r\n    <InGamePageWrapper\r\n        isGameEnded={isGameEnded}\r\n        isGameInProgress={isGameInProgress}>\r\n        <DrawingAndInfoSection\r\n            phraseInfo={phraseInfo}\r\n            mistakesLeft={mistakesLeft}\r\n            timeToNextLetter={timeToNextLetter}\r\n        />\r\n        <PhraseToGuessSection\r\n            phraseToGuess={phraseToGuess}\r\n            isGameWon={isGameWon}\r\n        />\r\n        <LettersToClickSection\r\n            isGameEnded={isGameEnded}\r\n            lettersToClick={lettersToClick}\r\n            clickLetter={clickLetter} />\r\n    </InGamePageWrapper>\r\n);\r\n\r\nInGamePage.propTypes = {\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    phraseInfo: PropTypes.object.isRequired,\r\n    lettersToClick: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n    isGameEnded: PropTypes.bool.isRequired,\r\n}\r\n\r\n\r\nexport default InGamePage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ButtonStyle } from '../Reusable/Buttons/StartGameButton';\r\n\r\nconst EndGameWrapper = styled.div`\r\nposition: absolute;\r\ntop: 0;\r\nbottom: 35%;\r\nleft: 0;\r\nright: 0;\r\nbackground-color:${({ theme }) => theme.colors.deepRed};\r\ntransform: ${({ isGameEnded }) => isGameEnded ? 'translateY(0)' : 'translateY(-100%)'};\r\ntransition: .4s  linear all;\r\ncolor: ${({ theme }) => theme.colors.white};\r\nfont-size: 1rem;\r\ntransition: .5s;\r\nh2,h3,p,i{\r\n    position: absolute;\r\n    left: 50%;\r\n    transform: ${({ isGameEnded }) => isGameEnded ? 'translateX(-50%)' : 'translateY(-150%)'};\r\n    text-align: center;\r\n    width: 100%;\r\n    opacity: ${({ isGameEnded }) => isGameEnded ? '1' : '0'};\r\n}\r\nh2{\r\n    font-weight: 700;\r\n    top: 8%;\r\n    font-size: 2em;\r\n}\r\nh3{\r\n    top: 25%;\r\n    font-size: 1.4em;\r\n   \r\n    \r\n}\r\np{\r\n    width: 80%;\r\n    top: 35%;\r\n    font-size: ${({ isGameWon }) => isGameWon ? '1.1em' : '1.8em'};\r\n    font-weight: 500;\r\n    letter-spacing: 2px;\r\n    line-height: 180%;\r\n    text-align: ${({ isGameWon }) => isGameWon && 'justify'};\r\n    bottom: 25%;\r\n    overflow: auto;\r\n    color: ${({ theme }) => theme.colors.winGamePhrase};\r\n    font-weight: ${({ isGameWon }) => !isGameWon && '700'};\r\n    padding: .5em;\r\n}\r\n\r\n@media (orientation:landscape){\r\n    bottom: 0;\r\n    right: 40%;\r\n}\r\n@media (orientation: portrait) and (min-width: ${props => props.theme.device.iPad}){\r\nfont-size: 2rem;\r\n}\r\n@media (orientation: landscape) and (min-width: ${props => props.theme.device.iPad}){\r\nfont-size: 1.6rem;\r\n}\r\n\r\n`\r\nconst Icon = styled.div`\r\nposition: absolute;\r\ntop: 70%;\r\nwidth: 100%;\r\nheight: 20%;\r\ni{\r\n    font-size: 5em;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n}\r\n`\r\n\r\nconst ButtonEndGameStyle = styled(ButtonStyle)`\r\ntop: 85%;\r\nheight: 8vh;\r\nwidth: 12em;\r\nfont-size: 1.4em;\r\nbackground-color: ${({ theme }) => theme.colors.deep};\r\ncolor: ${({ theme }) => theme.colors.white};\r\ntransition: none;\r\nfont-weight: 700;\r\n\r\n`\r\n\r\n\r\nconst EndGamePage = ({ isGameEnded, isGameWon, phraseToGuess, startGame, titbit }) => {\r\n    const titbitMessage = titbit;\r\n    const winOrLoseMessage = isGameWon ? 'Excellent!' : `Try again!`\r\n    const guessedPhrase = !isGameWon && phraseToGuess.map(phrase => phrase.letter);\r\n\r\n    const winOrLoseContent = <>\r\n        <h2>{winOrLoseMessage}</h2>\r\n        {\r\n            isGameWon ?\r\n                <>\r\n                    <h3>Fun Fact</h3>\r\n                    <p>\r\n                        {titbitMessage}\r\n                    </p>\r\n                </>\r\n                :\r\n                <>\r\n                    <h3>The correct phrase was</h3>\r\n                    <p>\r\n                        {guessedPhrase}\r\n                    </p>\r\n                    <Icon><i className=\"fas fa-sad-cry\"></i></Icon>\r\n                </>\r\n        }\r\n    </>\r\n\r\n\r\n\r\n    return (\r\n        <EndGameWrapper\r\n            isGameWon={isGameWon}\r\n            isGameEnded={isGameEnded}>\r\n\r\n            {winOrLoseContent}\r\n\r\n            <ButtonEndGameStyle\r\n                onClick={startGame}\r\n                phraseToGuess={phraseToGuess}>Play again\r\n            </ButtonEndGameStyle>\r\n\r\n        </EndGameWrapper>\r\n    );\r\n}\r\nexport default EndGamePage;","import React, { Component } from 'react';\r\nimport Layout from '../components/Layout/Layout';\r\nimport StartPage from '../components/StartPage/StartPage';\r\nimport InGamePage from '../components/InGamePage/InGamePage';\r\nimport EndGamePage from '../components/EndGamePage/EndGamePage';\r\nimport axios from 'axios'\r\nconst TIME_TO_NEXT_LETTER = 7;\r\nlet allPhrasesFromApi = {};\r\nconst API = 'https://hangman-239ba.firebaseio.com/.json'\r\n\r\nclass App extends Component {\r\n\r\n  state = {\r\n    phraseToGuess: [],          //phrase comes from API in componentDidMount\r\n    phraseInfo: {\r\n      category: '',\r\n      hint: '',\r\n      titbit: '',\r\n    },\r\n    lettersToClick: [           //letters in layout, possible to click or press (keyboard)\r\n      { letter: 'q', isClicked: false, isHit: false },\r\n      { letter: 'w', isClicked: false, isHit: false },\r\n      { letter: 'e', isClicked: false, isHit: false },\r\n      { letter: 'r', isClicked: false, isHit: false },\r\n      { letter: 't', isClicked: false, isHit: false },\r\n      { letter: 'y', isClicked: false, isHit: false },\r\n      { letter: 'u', isClicked: false, isHit: false },\r\n      { letter: 'i', isClicked: false, isHit: false },\r\n      { letter: 'o', isClicked: false, isHit: false },\r\n      { letter: 'p', isClicked: false, isHit: false },\r\n      { letter: 'a', isClicked: false, isHit: false },\r\n      { letter: 's', isClicked: false, isHit: false },\r\n      { letter: 'd', isClicked: false, isHit: false },\r\n      { letter: 'f', isClicked: false, isHit: false },\r\n      { letter: 'g', isClicked: false, isHit: false },\r\n      { letter: 'h', isClicked: false, isHit: false },\r\n      { letter: 'j', isClicked: false, isHit: false },\r\n      { letter: 'k', isClicked: false, isHit: false },\r\n      { letter: 'l', isClicked: false, isHit: false },\r\n      { letter: 'z', isClicked: false, isHit: false },\r\n      { letter: 'x', isClicked: false, isHit: false },\r\n      { letter: 'c', isClicked: false, isHit: false },\r\n      { letter: 'v', isClicked: false, isHit: false },\r\n      { letter: 'b', isClicked: false, isHit: false },\r\n      { letter: 'n', isClicked: false, isHit: false },\r\n      { letter: 'm', isClicked: false, isHit: false },\r\n    ],\r\n\r\n    timeToNextLetter: 7,        //if time === 0 => random letter is clicked \r\n    mistakesLeft: 7,            // if we select wrong letter => mistakes--. If mistakes ===0 => game is over\r\n    isGameInProgress: false,\r\n    isGameEnded: false,\r\n    isGameWon: false,\r\n  }\r\n\r\n  startGameHandler = () => {\r\n    this.giveRandomPhraseHandler(allPhrasesFromApi)\r\n    if (this.state.isGameEnded) {\r\n      this.setState({\r\n        isGameWon: false,\r\n        isGameEnded: false,\r\n        isGameInProgress: true,\r\n        mistakesLeft: 7,\r\n        timeToNextLetter: 7,\r\n        lettersToClick: [\r\n          { letter: 'q', isClicked: false, isHit: false },\r\n          { letter: 'w', isClicked: false, isHit: false },\r\n          { letter: 'e', isClicked: false, isHit: false },\r\n          { letter: 'r', isClicked: false, isHit: false },\r\n          { letter: 't', isClicked: false, isHit: false },\r\n          { letter: 'y', isClicked: false, isHit: false },\r\n          { letter: 'u', isClicked: false, isHit: false },\r\n          { letter: 'i', isClicked: false, isHit: false },\r\n          { letter: 'o', isClicked: false, isHit: false },\r\n          { letter: 'p', isClicked: false, isHit: false },\r\n          { letter: 'a', isClicked: false, isHit: false },\r\n          { letter: 's', isClicked: false, isHit: false },\r\n          { letter: 'd', isClicked: false, isHit: false },\r\n          { letter: 'f', isClicked: false, isHit: false },\r\n          { letter: 'g', isClicked: false, isHit: false },\r\n          { letter: 'h', isClicked: false, isHit: false },\r\n          { letter: 'j', isClicked: false, isHit: false },\r\n          { letter: 'k', isClicked: false, isHit: false },\r\n          { letter: 'l', isClicked: false, isHit: false },\r\n          { letter: 'z', isClicked: false, isHit: false },\r\n          { letter: 'x', isClicked: false, isHit: false },\r\n          { letter: 'c', isClicked: false, isHit: false },\r\n          { letter: 'v', isClicked: false, isHit: false },\r\n          { letter: 'b', isClicked: false, isHit: false },\r\n          { letter: 'n', isClicked: false, isHit: false },\r\n          { letter: 'm', isClicked: false, isHit: false },\r\n        ]\r\n      })\r\n\r\n    } else if (!this.state.isGameEnded) {\r\n      this.setState({ isGameInProgress: true, isGameEnded: false });\r\n    }\r\n\r\n  };\r\n\r\n  startTimeToNextLetterHandler = () => {\r\n    if (this.state.isGameEnded) return;\r\n    this.ID = setInterval(() => {\r\n      this.setState({ timeToNextLetter: this.state.timeToNextLetter - 1 })\r\n    }, 1000);\r\n  }\r\n\r\n  isSelectedLetterInPhraseHandler = (selectedLetterObj) => {\r\n    const { phraseToGuess } = this.state\r\n    const letterInPhrase = phraseToGuess.find(letterObj => letterObj.letter === selectedLetterObj.letter.toUpperCase())\r\n    const selectedLetter = selectedLetterObj.letter.toUpperCase()\r\n    selectedLetterObj.isClicked = true;\r\n    if (letterInPhrase) {\r\n      selectedLetterObj.isHit = true;\r\n      phraseToGuess.forEach(letterObj => {\r\n        if (letterObj.letter === selectedLetter) {\r\n          letterObj.isLetterShowed = true;\r\n        }\r\n      })\r\n    }\r\n    else {\r\n      this.setState({ mistakesLeft: this.state.mistakesLeft - 1 })\r\n    }\r\n  }\r\n\r\n  clickOrPressKeyLetterHandler = (e, key) => {\r\n    if (!this.state.isGameInProgress) return;\r\n    //Do only if game is not ended\r\n    if (this.state.isGameEnded || this.state.timeToNextLetter === 0) return;\r\n\r\n    const { lettersToClick, phraseToGuess, } = this.state\r\n    const clickedLetter = e.target.textContent\r\n    let pressedOrClickedLetter;\r\n\r\n    if (key) {\r\n      pressedOrClickedLetter = key.toUpperCase()\r\n    }\r\n    else if (clickedLetter) {\r\n      pressedOrClickedLetter = e.target.textContent;\r\n    }\r\n\r\n    const index = lettersToClick.findIndex(letter => letter.letter.toUpperCase() === pressedOrClickedLetter);\r\n\r\n    if (index === -1 || lettersToClick[index].isClicked) return\r\n\r\n    const selectedLetterObj = lettersToClick[index]\r\n    this.isSelectedLetterInPhraseHandler(selectedLetterObj)\r\n    clearInterval(this.ID)\r\n    this.startTimeToNextLetterHandler();\r\n    this.setState({ phraseToGuess, lettersToClick, timeToNextLetter: TIME_TO_NEXT_LETTER });\r\n  }\r\n\r\n\r\n  giveRandomPhraseHandler = (data) => {\r\n    //RANDOM CATEGORY \r\n    const randomNumberForCategory = Math.floor(Math.random() * Object.keys(data).length);\r\n    const randomCategoryObject = Object.entries(data)[randomNumberForCategory];\r\n    const category = randomCategoryObject[0] //position [0] is always category name\r\n    //RANDOM PHRASE IN THAT CATEGORY\r\n    const randomNumberForPhrase = Math.floor(Math.random() * Object.keys(randomCategoryObject[1]).length);\r\n    const randomPhraseObject = Object.entries(randomCategoryObject[1])[randomNumberForPhrase];\r\n    const phrase = randomPhraseObject[0];   //position [0] is always phrase name\r\n    //HINT AND TITBIT IN THAT PHRASE\r\n    const hint = randomPhraseObject[1].hint; //we can easy do random hint or titbit if possible\r\n    const titbit = randomPhraseObject[1].titbit;\r\n\r\n\r\n    const phraseToGuess = [];\r\n    [...phrase].map((phrase, index) => {\r\n      return phraseToGuess.push({\r\n        letter: phrase.toUpperCase(),\r\n        id: index,\r\n        isLetterShowed: false,\r\n      })\r\n    })\r\n    phraseToGuess.filter(letterObj => (\r\n      letterObj.letter === \" \" || letterObj.letter === \",\" || letterObj.letter === \"-\" ? letterObj.isLetterShowed = true : letterObj.isLetterShowed = false)\r\n    )\r\n\r\n    this.setState({\r\n      phraseToGuess,\r\n      phraseInfo: {\r\n        category,\r\n        hint,\r\n        titbit,\r\n      }\r\n    })\r\n\r\n  }\r\n\r\n\r\n  fetchDataHandler = () => {\r\n\r\n    axios.get(API)\r\n      .then(response => response.statusText ? response : Error)\r\n      .then(response => {\r\n        allPhrasesFromApi = response.data;\r\n        this.giveRandomPhraseHandler(response.data)\r\n      });\r\n  }\r\n\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    //END GAME HANDLER\r\n    if (this.state.isGameEnded) return;\r\n    const lettersToClick = prevState.lettersToClick;\r\n    const allLettersAreShowed = this.state.phraseToGuess.filter(phrase => !phrase.isLetterShowed).length === 0;\r\n    const noMistakesLeft = this.state.mistakesLeft === 0 && true;\r\n    if (allLettersAreShowed) this.setState({ isGameWon: true });\r\n    if (allLettersAreShowed || noMistakesLeft) {\r\n      clearInterval(this.ID)\r\n      clearTimeout(this.TimeoutID)\r\n      this.setState({\r\n        isGameEnded: true,\r\n        isGameInProgress: false,\r\n      })\r\n    };\r\n    //END GAME HANDLER\r\n\r\n    //AUTO-CLICK LETTER HANDLER\r\n    if (prevState.timeToNextLetter !== this.state.timeToNextLetter) {\r\n      const { phraseToGuess } = this.state\r\n      if (phraseToGuess.filter(phrase => !phrase.isLetterShowed).length === 0) return; // if the phrase is guessed\r\n      if (lettersToClick.filter(letterObj => !letterObj.isClicked).length === 0) return; // if all letters are clicked\r\n\r\n      const filteredLetters = lettersToClick.filter(letterToClick => !letterToClick.isClicked);\r\n      const random = Math.floor(Math.random() * filteredLetters.length);\r\n      const autoClicked = filteredLetters[random];   //this is random clicked letter (OBJECT)\r\n      if (this.state.timeToNextLetter === 0) {\r\n        this.isSelectedLetterInPhraseHandler(autoClicked);\r\n        this.setState({ phraseToGuess, lettersToClick });\r\n        clearInterval(this.ID);\r\n        this.TimeoutID = setTimeout(() => {\r\n          this.setState({ timeToNextLetter: TIME_TO_NEXT_LETTER })\r\n          this.startTimeToNextLetterHandler();\r\n        }, 1000);\r\n      };\r\n    };\r\n  };\r\n\r\n\r\n\r\n  componentDidMount() {\r\n    document.addEventListener('keydown', (e) => this.clickOrPressKeyLetterHandler(e, e.key));\r\n    this.fetchDataHandler();\r\n  }\r\n\r\n\r\n\r\n  componentWillUnmount() {\r\n\r\n    document.removeEventListener('keydown', this.clickOrPressKeyLetterHandler())\r\n  }\r\n\r\n  render() {\r\n    console.log(this.state.isGameEnded);\r\n    const {\r\n      phraseToGuess,\r\n      lettersToClick,\r\n      timeToNextLetter,\r\n      mistakesLeft,\r\n      isGameInProgress,\r\n      isGameEnded,\r\n      phraseInfo,\r\n      isGameWon,\r\n    } = this.state\r\n\r\n    return (\r\n\r\n      <Layout\r\n        isGameInProgress={isGameInProgress}>\r\n        <StartPage\r\n          phraseToGuess={phraseToGuess}\r\n          isGameEnded={isGameEnded}\r\n          isGameInProgress={isGameInProgress}\r\n          startGame={this.startGameHandler} />\r\n        <InGamePage\r\n          isGameEnded={isGameEnded}\r\n          isGameInProgress={isGameInProgress}\r\n          phraseInfo={phraseInfo}\r\n          phraseToGuess={phraseToGuess}\r\n          lettersToClick={lettersToClick}\r\n          timeToNextLetter={timeToNextLetter}\r\n          mistakesLeft={mistakesLeft}\r\n          clickLetter={this.clickOrPressKeyLetterHandler}\r\n          isGameWon={isGameWon}\r\n        />\r\n        <EndGamePage\r\n          titbit={phraseInfo.titbit}\r\n          startGame={this.startGameHandler}\r\n          phraseToGuess={phraseToGuess}\r\n          isGameWon={isGameWon}\r\n          isGameEnded={isGameEnded} />\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(< App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}