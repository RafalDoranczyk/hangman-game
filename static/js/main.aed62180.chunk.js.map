{"version":3,"sources":["components/PhraseToGuess/Letters/Letter/Letter.js","components/PhraseToGuess/Letters/Letters.js","components/PhraseToGuess/PhraseToGuess.js","components/LettersToClick/LetterToClick/LetterToClick.js","components/LettersToClick/LettersToClick.js","components/Layout/Layout.js","components/HangmanDrawing/HangmanDrawing.js","components/InfoAndHint/InfoAndHint.js","containers/App.js","serviceWorker.js","index.js"],"names":["LetterWrapper","styled","span","_templateObject","letter","_ref","react_default","a","createElement","isShowed","name","LettersWrapper","div","Letters_templateObject","letters","phraseToGuess","map","Letter","key","id","PhraseToGuessWrapper","PhraseToGuess_templateObject","PhraseToGuess","playerLetter","clickedKeyInfo","Letters","LetterToClick_templateObject","isClicked","letterToClick","_ref2","clickLetter","LetterToClick_Letter","onClick","LettersToClick_templateObject","LettersToClick","lettersToClick","LetterToClick","e","toUpperCase","LettersToClick_LettersWrapper","GlobalStyle","createGlobalStyle","Layout_templateObject","Layout","_templateObject2","layout","props","Fragment","children","HangmanDrawingWrapper","HangmanDrawing_templateObject","hangmanDrawing","InfoAndHintWrapper","InfoAndHint_templateObject","infoAndHint","App","state","mistakes","pressLetterHandler","_this$state","_this","index","findIndex","setState","phrase","clickLetterHandler","_this$state2","target","textContent","console","log","_this2","this","document","addEventListener","Object","toConsumableArray","push","_this$state3","Layout_Layout","InfoAndHint","HangmanDrawing","components_PhraseToGuess_PhraseToGuess","components_LettersToClick_LettersToClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aed62180.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst LetterWrapper = styled.span`\r\n/* margin: 15px; */\r\nheight: 20px;\r\nwidth: 20px;\r\n/* background-color: blue; */\r\nfont-size: 20px;\r\n`\r\n\r\nconst letter = ({ letter }) => (\r\n    <LetterWrapper>\r\n        {letter.isShowed ? letter.name : '_'}\r\n    </LetterWrapper>\r\n);\r\n\r\n\r\nexport default letter;","import React from 'react';\r\nimport Letter from './Letter/Letter';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\ndisplay: flex;\r\nflex-flow: row wrap;`\r\n\r\n\r\nconst letters = ({ phraseToGuess }) => {\r\n    const letters = phraseToGuess.map(letter => (\r\n        <Letter\r\n            key={letter.id}\r\n            letter={letter}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default letters;","import React from 'react';\r\nimport Letters from './Letters/Letters';\r\nimport styled from 'styled-components';\r\n\r\nconst PhraseToGuessWrapper = styled.div`\r\nflex-basis: 15%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbackground-color: blue;\r\n`\r\n\r\n\r\nconst PhraseToGuess = ({ playerLetter, phraseToGuess }) => {\r\n\r\n\r\n    const clickedKeyInfo = playerLetter ?\r\n        <h2>Your last letter: {playerLetter}</h2> :\r\n        <h2>Press or click key to start!</h2>\r\n\r\n    return (\r\n        <PhraseToGuessWrapper>\r\n            {clickedKeyInfo}\r\n            <Letters\r\n                phraseToGuess={phraseToGuess}\r\n            />\r\n        </PhraseToGuessWrapper>\r\n    );\r\n}\r\n\r\nexport default PhraseToGuess;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Letter = styled.span`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nborder: 1px solid black;\r\nheight: 4rem;\r\nwidth: 4rem;\r\nmargin: 1px;\r\nfont-size: 1.4rem;\r\nfont-weight: 700;\r\nbackground-color: ${({ isClicked }) => isClicked ? '#222' : '#aaa'};\r\n`\r\n\r\nconst letterToClick = ({ letter, isClicked, clickLetter }) => {\r\n    return (\r\n        <Letter\r\n            onClick={clickLetter}\r\n            isClicked={isClicked}\r\n        >{letter}</Letter>\r\n    )\r\n}\r\nexport default letterToClick;","import React from 'react';\r\nimport LetterToClick from './LetterToClick/LetterToClick';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\nflex-basis: 30%;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\njustify-content: center;\r\nalign-items: center;\r\nbackground-color: #111;\r\noverflow: hidden;\r\n`\r\n\r\nconst LettersToClick = ({ lettersToClick, clickLetter }) => {\r\n\r\n    const letters = lettersToClick.map(letterToClick => (\r\n        <LetterToClick\r\n            clickLetter={(e) => { clickLetter(e) }}\r\n            key={letterToClick.letter}\r\n            isClicked={letterToClick.isClicked}\r\n            letter={letterToClick.letter.toUpperCase()} />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default LettersToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\nmargin: 0;\r\npadding: 0;\r\nbox-sizing: border-box;\r\nfont-weight: normal;\r\n}\r\n:root{\r\n    font-size: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n}\r\n\r\n`\r\n\r\nconst Layout = styled.div`\r\nbackground-color: #444;\r\nheight: 100vh;\r\noverflow: hidden;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-evenly;\r\nalign-items: center;\r\n&>*{\r\n    width: 100%;\r\n}\r\n`\r\n\r\nconst layout = (props) =>\r\n    (\r\n        <>\r\n            <GlobalStyle />\r\n            <Layout>{props.children}</Layout>\r\n        </>\r\n    )\r\n\r\nexport default layout;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst HangmanDrawingWrapper = styled.div`\r\nflex-basis: 40%;\r\nbackground-color: red;\r\n`\r\n\r\n\r\nconst hangmanDrawing = () => (\r\n    <HangmanDrawingWrapper />\r\n)\r\nexport default hangmanDrawing;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst InfoAndHintWrapper = styled.div`\r\nflex-basis: 10%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbackground-color: yellow;\r\n`\r\nconst infoAndHint = props => {\r\n    return (\r\n        <InfoAndHintWrapper>\r\n            <h3>Category: category</h3>\r\n            <h4>Your hint: hint</h4>\r\n        </InfoAndHintWrapper>\r\n    );\r\n}\r\n\r\nexport default infoAndHint;","import React, { Component } from 'react';\nimport PhraseToGuess from '../components/PhraseToGuess/PhraseToGuess';\nimport LettersToClick from '../components/LettersToClick/LettersToClick'\nimport Layout from '../components/Layout/Layout'\nimport HangmanDrawing from '../components/HangmanDrawing/HangmanDrawing'\nimport InfoAndHint from '../components/InfoAndHint/InfoAndHint';\n\nclass App extends Component {\n\n  state = {\n    playerLetter: '',\n    phraseToGuess: [],\n    lettersToClick: [\n      { letter: 'a', isClicked: false },\n      { letter: 'b', isClicked: false },\n      { letter: 'c', isClicked: false },\n      { letter: 'd', isClicked: false },\n      { letter: 'e', isClicked: false },\n      { letter: 'f', isClicked: false },\n      { letter: 'g', isClicked: false },\n      { letter: 'h', isClicked: false },\n      { letter: 'i', isClicked: false },\n      { letter: 'j', isClicked: false },\n      { letter: 'k', isClicked: false },\n      { letter: 'l', isClicked: false },\n      { letter: 'm', isClicked: false },\n      { letter: 'n', isClicked: false },\n      { letter: 'o', isClicked: false },\n      { letter: 'p', isClicked: false },\n      { letter: 'q', isClicked: false },\n      { letter: 'r', isClicked: false },\n      { letter: 's', isClicked: false },\n      { letter: 't', isClicked: false },\n      { letter: 'u', isClicked: false },\n      { letter: 'v', isClicked: false },\n      { letter: 'w', isClicked: false },\n      { letter: 'y', isClicked: false },\n      { letter: 'x', isClicked: false },\n      { letter: 'z', isClicked: false },\n    ],\n    mistakes: 0,\n  }\n\n\n\n  // THESE TWO FUNCTION CAN BE ONE\n\n  pressLetterHandler = (playerLetter) => {\n    const { phraseToGuess, lettersToClick } = this.state\n    const index = lettersToClick.findIndex(letterToClick => (\n      letterToClick.letter.toUpperCase() === playerLetter.toUpperCase()));\n\n    if (index !== -1) {\n      if (lettersToClick[index].isClicked) return\n\n      this.setState({ playerLetter })\n      lettersToClick[index].isClicked = true\n      phraseToGuess.map(phrase => phrase.name === playerLetter ? phrase.isShowed = true : false\n      );\n      this.setState({ phraseToGuess, lettersToClick });\n    } else return;\n  }\n\n  clickLetterHandler = (e) => {\n    const { lettersToClick, phraseToGuess, } = this.state\n    const target = e.target.textContent;\n\n    const index = lettersToClick.findIndex(letterToClick => (\n      letterToClick.letter.toUpperCase() === target.toUpperCase()\n    ));\n    if (!lettersToClick[index].isClicked) {\n      this.setState({ playerLetter: target })\n    }\n    lettersToClick[index].isClicked = true\n    phraseToGuess.map(phrase => phrase.name === target ? phrase.isShowed = true : false\n    );\n\n    console.log(lettersToClick[index]);\n    this.setState({ phraseToGuess, lettersToClick });\n\n  }\n\n\n\n  componentWillMount() {\n    document.addEventListener(\"keypress\", (e) => this.pressLetterHandler(e.key.toUpperCase()))\n\n  }\n\n  componentDidMount() {\n    const fetchedPhrase = 'aleksander';\n    const { phraseToGuess } = this.state;\n    [...fetchedPhrase].map((phrase, index) => {\n      return phraseToGuess.push({\n        name: phrase.toUpperCase(),\n        id: index,\n        isShowed: false,\n      })\n    })\n    this.setState({ phraseToGuess })\n  }\n\n\n  render() {\n\n    const { playerLetter, phraseToGuess, lettersToClick } = this.state\n    return (\n      <Layout>\n        <InfoAndHint />\n        <HangmanDrawing />\n        <PhraseToGuess\n          phraseToGuess={phraseToGuess}\n          playerLetter={playerLetter} />\n        <LettersToClick\n          lettersToClick={lettersToClick}\n          clickLetter={this.clickLetterHandler}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}