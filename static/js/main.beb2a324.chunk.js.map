{"version":3,"sources":["theme/theme.js","components/Layout/Layout.js","components/Reusable/Hangman/Hangman.js","components/Reusable/Buttons/StartGameButton.js","components/Reusable/Buttons/GameInfoButton.js","components/StartPage/StartPage.js","components/InGamePage/DrawingAndInfoSection/HangmanDrawing/HangmanDrawing.js","components/InGamePage/DrawingAndInfoSection/GameInfo/GameInfo.js","components/InGamePage/DrawingAndInfoSection/DrawingAndInfoSection.js","components/InGamePage/PhraseToGuessSection/Letters/Letter/Letter.js","components/InGamePage/PhraseToGuessSection/Letters/Letters.js","components/InGamePage/PhraseToGuessSection/PhraseToGuessSection.js","components/InGamePage/LettersToClickSection/LetterToClick/LetterToClick.js","components/InGamePage/LettersToClickSection/LettersToClickSection.js","components/InGamePage/InGamePage.js","components/EndGamePage/EndGamePage.js","containers/App.js","serviceWorker.js","index.js"],"names":["theme","colors","white","black","gray","deep","green","red","deepRed","winGamePhrase","GlobalStyle","createGlobalStyle","_templateObject","_ref","LayoutWrapper","styled","div","_templateObject2","Layout","_ref2","isGameInProgress","children","react_default","a","createElement","styled_components_browser_esm","Fragment","StylesForAllParts","Hangman_templateObject","GallowsBasis","Hangman_templateObject2","GallowBranch","_templateObject3","GallowTopBranch","_templateObject4","GallowsNoose","_templateObject5","_ref3","mistakesLeft","Head","_templateObject6","_ref4","manFromTop","concat","_ref5","_ref6","isGameEnded","Body","_templateObject7","_ref7","_ref8","_ref9","StylesForArms","_templateObject8","LeftArm","_templateObject9","_ref10","_ref11","_ref12","RightArm","_templateObject10","_ref13","_ref14","_ref15","StylesForLegs","_templateObject11","LeftLeg","_templateObject12","_ref16","_ref17","_ref18","RightLeg","_templateObject13","_ref19","_ref20","_ref21","Hangman","_ref22","isGameWon","ButtonStyle","button","StartGameButton_templateObject","disabled","StartGameButton","startGame","phraseToGuess","length","onClick","ButtonInfoStyle","GameInfoButton_templateObject","GameInfoButton","StartPageWrapper","StartPage_templateObject","HangmanWrapper","StartPage_templateObject2","StartPage","text","Reusable_Hangman_Hangman","Buttons_StartGameButton","Buttons_GameInfoButton","HangmanDrawingWrapper","HangmanDrawing_templateObject","HangmanDrawing_templateObject2","HangmanDrawingSection","HangmanDrawing_HangmanWrapper","GameInfoWrapper","GameInfo_templateObject","Info","GameInfo_templateObject2","Category","p","GameInfo_templateObject3","Hint","GameInfo_templateObject4","MistakesLeft","GameInfo_templateObject5","TimeToNextLetterWrapper","GameInfo_templateObject6","GameInfoSection","timeToNextLetter","phraseInfo","category","hint","DrawingAndInfoSectionWrapper","DrawingAndInfoSection_templateObject","DrawingAndInfoSection","HangmanDrawing","GameInfo","LetterWrapper","span","Letter_templateObject","Letter","letterObj","isLetterShowed","letter","LettersWrapper","Letters_templateObject","BreakLine","Letters_templateObject2","Letters","letters","map","Letters_Letter_Letter","key","id","PhraseToGuessWrapper","PhraseToGuessSection_templateObject","PhraseToGuess","PhraseToGuessSection_Letters_Letters","LetterToClick_templateObject","isClicked","isHit","LetterToClick","clickLetter","LetterToClick_Letter","LettersToClickSection_templateObject","LettersToClick","lettersToClick","letterToClick","LettersToClickSection_LetterToClick_LetterToClick","e","toUpperCase","LettersToClickSection_LettersWrapper","InGamePageWrapper","InGamePage_templateObject","InGamePage","InGamePage_DrawingAndInfoSection_DrawingAndInfoSection","PhraseToGuessSection","LettersToClickSection","EndGameWrapper","EndGamePage_templateObject","ButtonEndGameStyle","EndGamePage_templateObject2","EndGamePage","titbitMessage","titbit","winOrLoseMessage","guessedPhrase","phrase","winOrLoseContent","TIME_TO_NEXT_LETTER","allPhrasesFromApi","API","App","state","startGameHandler","_this","giveRandomPhraseHandler","startID","setTimeout","setState","startTimeToNextLetterHandler","ID","setInterval","isSelectedLetterInPhraseHandler","selectedLetterObj","letterInPhrase","find","selectedLetter","forEach","clickOrPressKeyLetterHandler","pressedOrClickedLetter","_this$state","clickedLetter","target","textContent","index","findIndex","clearInterval","data","randomNumberForCategory","Math","floor","random","Object","keys","randomCategoryObject","entries","randomNumberForPhrase","randomPhraseObject","toConsumableArray","push","filter","fetchDataHandler","axios","get","then","response","statusText","Error","prevProps","prevState","_this2","this","allLettersAreShowed","noMistakesLeft","clearTimeout","TimeoutID","filteredLetters","autoClicked","_this3","document","addEventListener","removeEventListener","_this$state2","components_Layout_Layout","components_StartPage_StartPage","components_InGamePage_InGamePage","components_EndGamePage_EndGamePage","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.beb2a324.chunk.js","sourcesContent":["export const theme = {\r\n\r\n    colors: {\r\n        white: '#fff',\r\n        black: '#000',\r\n        gray: '#D6D6D8',\r\n        deep: '#140A25',\r\n        green: '#69a982',\r\n        red: '#6f2232',\r\n        deepRed: '#400D2A',\r\n        winGamePhrase: '#f2b134',\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types'\r\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\r\nimport { theme } from '../../theme/theme';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-weight: normal;\r\n \r\n}\r\n* ::after, * ::before{\r\n    position: absolute;\r\n    content: '';\r\n}\r\n\r\n\r\n:root{\r\n    color:${({ theme }) => theme.colors.black};\r\n    font-size: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n}\r\n`\r\nconst LayoutWrapper = styled.div`\r\nposition: absolute;\r\ntop: 50%;\r\nleft: 50%;\r\nheight: 100%;\r\nwidth: 100%;\r\noverflow: hidden;\r\nmax-width: 1000px;\r\ntransform: translate(-50%,-50%);\r\nbackground-color: black;\r\n`\r\n\r\nconst Layout = ({ isGameInProgress, children }) =>\r\n    (\r\n        <ThemeProvider theme={theme}>\r\n            <>\r\n                <GlobalStyle\r\n                    isGameInProgress={isGameInProgress} />\r\n                <LayoutWrapper>\r\n                    {children}\r\n                </LayoutWrapper>\r\n            </>\r\n        </ThemeProvider>\r\n\r\n    )\r\n\r\n\r\nLayout.propTypes = {\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default Layout;","import styled from 'styled-components';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// IF U WANT TO USE THIS COMPONENT => WRAPPER FOR IT NEEDS POSITION RELATIVE, SOME WIDTH AND HEIGHT AND *{\r\n//     POSITION: ABSOLUTE\r\n//               }\r\n\r\n\r\n//HangmanDrawingParts\r\nconst StylesForAllParts = styled.div`\r\n    transition: .4s;\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n    &::after,&::before{\r\n        background-color: ${({ theme }) => theme.colors.white};\r\n    }\r\n\r\n\r\n`\r\nconst GallowsBasis = styled(StylesForAllParts)`\r\n    top: 95%;\r\n    height: .3em;\r\n    left: 5%;\r\n    width: 9em;\r\n`\r\nconst GallowBranch = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    bottom: 5%;\r\n    left: 5%;\r\n    width: .4em;\r\n    &::after{\r\n        top: 0%;\r\n        height: 4em;\r\n        left: 300%;\r\n        width: 100%;\r\n        transform: rotate(35deg);\r\n    }\r\n    `\r\nconst GallowTopBranch = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    height: .4em;\r\n    left: 5%;\r\n    width: 14em;\r\n`\r\nconst GallowsNoose = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    height: 4em;\r\n    left: calc(5% + 14em);\r\n    width: .4em;\r\n    transform: translateX(-50%);\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 6 ? '1' : '0'};\r\n\r\n`\r\n\r\nconst Head = styled(StylesForAllParts)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 4em)`};\r\n    height: 3em;\r\n    left: calc(5% + 14em);\r\n    transform: translateX(-50%);\r\n    width: 3em;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 5 ? '1' : '0'};\r\n    border: .1em solid white;\r\n    border-radius: 50%;\r\n    background-color: transparent;\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n    ::after,::before{\r\n        top: 20%;\r\n        height: 10%;\r\n        width: 10%;\r\n        border-radius: 50%;\r\n    }\r\n    ::after{\r\n        left: 25%;\r\n    \r\n    }\r\n    ::before{\r\n        right: 25%;\r\n    }\r\n`\r\nconst Body = styled(StylesForAllParts)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7em)`};\r\n    height: 4em;\r\n    left: calc(5% + 14em);\r\n    width: .3em;\r\n    transform: translateX(-50%);\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 4 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\nconst StylesForArms = styled(StylesForAllParts)`\r\n   height: .2em;\r\n   width: 2.8em;\r\n   border-radius: 30%;\r\n\r\n`\r\n\r\nconst LeftArm = styled(StylesForArms)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7.6em)`}; \r\n    left: calc(5% + 14em - 2.8em);\r\n    transform: rotate(-30deg);\r\n    transform-origin: top right;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 3 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\nconst RightArm = styled(StylesForArms)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7.6em)`}; \r\n    left: calc(5% + 14em);\r\n    transform:  rotate(30deg);\r\n    transform-origin: top left;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 2 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\nconst StylesForLegs = styled(StylesForAllParts)`\r\n    border-radius: 30%;\r\n    width: .2em;\r\n    height: 3.2em;\r\n   \r\n`\r\nconst LeftLeg = styled(StylesForLegs)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7em + 4em)`};\r\n    left: calc(5% + 14em);\r\n    transform: translateX(-50%)  rotate(50deg);\r\n    transform-origin: top right;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 1 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\nconst RightLeg = styled(StylesForLegs)`\r\n    top: ${({ manFromTop }) => `calc(${manFromTop} + 7em + 4em)`};\r\n    left: calc(5% + 14em - .2em);\r\n    transform: translateX(50%)  rotate(-50deg);\r\n    transform-origin: top left;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 0 ? '1' : '0'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '1s 1s linear all' : '.5s linear all'};\r\n`\r\n\r\nconst Hangman = ({ mistakesLeft, isGameEnded, isGameWon }) => {\r\n    const manFromTop = isGameEnded && isGameWon ? 'calc(30%)' : '5%';\r\n    return (\r\n        <>\r\n            <GallowsBasis />\r\n            <GallowBranch />\r\n            <GallowTopBranch />\r\n            <GallowsNoose\r\n                isGameEnded={isGameEnded}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <Head\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <Body\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <LeftArm\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <LeftLeg\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <RightArm\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n            <RightLeg\r\n                isGameEnded={isGameEnded}\r\n                manFromTop={manFromTop}\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n        </>\r\n    )\r\n};\r\n\r\nHangman.propTypes = {\r\n    mistakesLeft: PropTypes.number,\r\n}\r\n\r\nexport default Hangman;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ButtonStyle = styled.button`\r\nposition: absolute;\r\ntop: 60%;\r\nleft: 50%;\r\ntransform:translateX(-50%);\r\nheight: 50px;\r\nwidth: 150px;\r\nborder-radius: 50px;\r\nborder: none;\r\nfont-size: 1.1em;\r\nletter-spacing: 2px;\r\nbackground-color: ${({ theme, disabled }) => disabled ? theme.colors.black : theme.colors.deepRed};\r\ncolor: ${({ theme }) => theme.colors.gray};\r\ncursor: pointer;\r\ntransition: .6s linear all;\r\n`\r\n\r\n\r\nconst StartGameButton = ({ startGame, phraseToGuess,children }) => {\r\n\r\n  \r\n\r\n    return (\r\n        <ButtonStyle\r\n            disabled={phraseToGuess.length > 0 ? false : true}\r\n            onClick={startGame}>\r\n           {children}\r\n        </ButtonStyle>\r\n    )\r\n}\r\n\r\n\r\nStartGameButton.propTypes = {\r\n    startGame: PropTypes.func.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\r\n}\r\n\r\nexport default StartGameButton;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ButtonStyle } from './StartGameButton';\r\n\r\nconst ButtonInfoStyle = styled(ButtonStyle)`\r\ntop: 75%;\r\n/* background-color: #8F1D2C; */\r\n`\r\n\r\n\r\n\r\nconst GameInfoButton = () => (\r\n    <ButtonInfoStyle>\r\n        Game Info\r\n\r\n    </ButtonInfoStyle>\r\n);\r\n\r\nexport default GameInfoButton;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Hangman from '../Reusable/Hangman/Hangman';\r\nimport StartGameButton from '../Reusable/Buttons/StartGameButton';\r\nimport GameInfoButton from '../Reusable/Buttons/GameInfoButton';\r\n\r\nconst StartPageWrapper = styled.div`\r\nheight: 100%;\r\nwidth: 100%;\r\nopacity: ${({ isGameInProgress, isGameEnded }) => isGameInProgress || isGameEnded ? '0' : '1'};\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\ntransition: .4s linear all;\r\n\r\nfont-size: 15px;\r\n`\r\n\r\nconst HangmanWrapper = styled.div`\r\nposition: relative;\r\nheight: 100%;\r\nwidth: 100%;\r\nbackground-color: ${({ theme }) => theme.colors.deep};\r\n*{\r\n    opacity:1;\r\n    position: absolute;\r\n}\r\n`\r\n\r\n\r\nconst StartPage = ({ isGameInProgress, startGame, isGameEnded, phraseToGuess, children }) => {\r\n    const text = phraseToGuess.length > 0 ? 'Start Game' : 'Loading...'\r\n\r\n    return (\r\n        <StartPageWrapper\r\n            isGameEnded={isGameEnded}\r\n            isGameInProgress={isGameInProgress}>\r\n            <HangmanWrapper>\r\n                <Hangman />\r\n            </HangmanWrapper>\r\n            <StartGameButton\r\n                phraseToGuess={phraseToGuess}\r\n                startGame={startGame}\r\n            >{text}\r\n            </StartGameButton>\r\n            <GameInfoButton>\r\n                {children}\r\n            </GameInfoButton>\r\n        </StartPageWrapper>\r\n    )\r\n}\r\n\r\nStartPage.propTypes = {\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n    startGame: PropTypes.func.isRequired,\r\n    isGameEnded: PropTypes.bool.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n}\r\n\r\n\r\nexport default StartPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Hangman from '../../../Reusable/Hangman/Hangman';\r\n\r\nconst HangmanDrawingWrapper = styled.div`\r\n    flex-grow: 1;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n`\r\n\r\nconst HangmanWrapper = styled.div`\r\nposition: relative;\r\nheight: 100%;\r\nwidth:100%;\r\nfont-size: 9px;\r\nz-index: 1;\r\n*{\r\n\r\n    position: absolute;\r\n}\r\n`\r\n\r\n\r\nconst HangmanDrawingSection = ({ mistakesLeft }) => (\r\n    <HangmanDrawingWrapper>\r\n        <HangmanWrapper>\r\n            <Hangman\r\n                mistakesLeft={mistakesLeft}\r\n            />\r\n\r\n        </HangmanWrapper>\r\n\r\n\r\n    </HangmanDrawingWrapper>\r\n);\r\n\r\nHangmanDrawingSection.propTypes = {\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default HangmanDrawingSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GameInfoWrapper = styled.div`\r\n    flex-basis: 50%;\r\n    background-color: ${({ theme }) => theme.colors.deepRed};\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-end;\r\n    text-align: center;\r\n    font-size: 1.4rem;\r\n    color: ${({ theme }) => theme.colors.gray};\r\nspan{\r\n    display: block;\r\n}\r\n\r\n`\r\nconst Info = styled.div`\r\n    flex-basis: 90.5%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-around;\r\n    align-items: flex-end;\r\n`\r\n\r\nconst Category = styled.p`\r\n    flex-basis: 100%;\r\n    height: 25%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-around;\r\n    font-weight: 700;\r\n`\r\nconst Hint = styled.p`\r\n    flex-basis: 95%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-around;\r\n    height: 40%;\r\n    font-weight: 700;\r\n`\r\n\r\nconst MistakesLeft = styled.div`\r\n    flex-basis: 40%;\r\n    height: 20%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 2rem;\r\n    margin-bottom: .1rem;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n    border-radius: 100px;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    position: relative;\r\n    &::before{\r\n        top: 50%;\r\n        transform: translate(-90%, -50%);\r\n        left: 0;\r\n        width: 6rem;\r\n        height: 1rem;\r\n        border-radius: 20%;\r\n        background-color: ${({ theme }) => theme.colors.deep};\r\n    }\r\n`\r\n\r\n\r\nconst TimeToNextLetterWrapper = styled.div`\r\n    flex-basis: 40%;\r\n    height: 20%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: .1rem;\r\n    font-size: 2rem;\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n    border-radius: 100px;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    position: relative;\r\n    &::before{\r\n        top: 100%;\r\n        transform: translate(-50%, -10%);\r\n        left: 50%;\r\n        width: 1rem;\r\n        height: 3rem;\r\n        border-radius: 20%;\r\n        background-color:${({ theme }) => theme.colors.black};\r\n    }\r\n`\r\n\r\nconst GameInfoSection = ({ timeToNextLetter, mistakesLeft, phraseInfo }) => {\r\n    return (\r\n        <GameInfoWrapper>\r\n            <Info>\r\n                <Category>Category <span>{phraseInfo.category}</span> </Category>\r\n                <Hint>Hint <span>{phraseInfo.hint}</span></Hint>\r\n                <MistakesLeft>{mistakesLeft}</MistakesLeft>\r\n                <TimeToNextLetterWrapper>{timeToNextLetter} </TimeToNextLetterWrapper>\r\n            </Info>\r\n        </GameInfoWrapper>\r\n    )\r\n};\r\n\r\nGameInfoSection.propTypes = {\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    phraseInfo: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\n\r\n\r\nexport default GameInfoSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport HangmanDrawing from './HangmanDrawing/HangmanDrawing';\r\nimport GameInfo from './GameInfo/GameInfo';\r\n\r\n\r\n\r\nconst DrawingAndInfoSectionWrapper = styled.div`\r\n    flex-basis: 40%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    overflow: hidden;\r\n    &::after{\r\n        top: 0;\r\n        left: 30%;\r\n        right: 47%;\r\n        height: 120%;\r\n        transform: rotate(3deg);\r\n        transform-origin: bottom right;\r\n        background-color:${({ theme }) => theme.colors.deep};\r\n    }\r\n`\r\n\r\n\r\nconst DrawingAndInfoSection = ({ timeToNextLetter, mistakesLeft, phraseInfo }) => (\r\n\r\n    <DrawingAndInfoSectionWrapper>\r\n        <HangmanDrawing\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <GameInfo\r\n            phraseInfo={phraseInfo}\r\n            mistakesLeft={mistakesLeft}\r\n            timeToNextLetter={timeToNextLetter}\r\n        />\r\n    </DrawingAndInfoSectionWrapper>\r\n);\r\n\r\n\r\nDrawingAndInfoSection.propTypes = {\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    phraseInfo: PropTypes.object.isRequired,\r\n}\r\nexport default DrawingAndInfoSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LetterWrapper = styled.span`\r\n    display: block;\r\n    height: 1.5rem;\r\n    width: 1.5rem;\r\n    font-size: 2rem;\r\n    margin-left: 1.4rem;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n`\r\n\r\nconst Letter = ({ letterObj }) => (\r\n    <LetterWrapper>\r\n        {letterObj.isLetterShowed ? letterObj.letter : \"__\"}\r\n    </LetterWrapper>\r\n);\r\n\r\nLetter.propTypes = {\r\n    letterObj: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\nexport default Letter;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Letter from './Letter/Letter';\r\n\r\nconst LettersWrapper = styled.div`\r\n\r\n    flex-basis: 90%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    align-content: space-around;\r\n    text-align: center;\r\n\r\n`\r\n\r\nconst BreakLine = styled.div`\r\n    flex-basis: 100%;\r\n    height: 1%;\r\n`\r\n\r\n\r\n\r\nconst Letters = ({ phraseToGuess }) => {\r\n\r\n    const letters = phraseToGuess.map(letterObj => {\r\n        let letters;\r\n        if (letterObj.letter !== \" \") {\r\n            letters = <Letter\r\n                key={letterObj.id}\r\n                letterObj={letterObj} />\r\n        }\r\n        else if (letterObj.letter === \" \") {\r\n            letters = <BreakLine\r\n                key={letterObj.id} />\r\n        }\r\n        return letters;\r\n    })\r\n\r\n    return (\r\n\r\n        <LettersWrapper>{letters}</LettersWrapper>\r\n    );\r\n};\r\n\r\nLetters.propTypes = {\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n}\r\n\r\nexport default Letters;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Letters from './Letters/Letters';\r\n\r\nconst PhraseToGuessWrapper = styled.div`\r\n    flex-basis: 25%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    justify-content: space-around;\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n`\r\n\r\nconst PhraseToGuess = ({ phraseToGuess }) => (\r\n\r\n    <PhraseToGuessWrapper>\r\n\r\n        <Letters phraseToGuess={phraseToGuess} />\r\n\r\n    </PhraseToGuessWrapper>\r\n\r\n);\r\n\r\nPhraseToGuess.propTypes = {\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\r\n}\r\n\r\nexport default PhraseToGuess;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Letter = styled.span`\r\n    flex-basis: 10%;\r\n    height: 15%;\r\n    margin: 1% 2%;\r\n    font-size: 1.5rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    font-weight: 700;\r\n    transform: ${({ isClicked }) => isClicked ? 'translateY(.2rem)' : 'scale(1.1)'};  \r\n    box-shadow: ${({ isClicked, isHit, theme }) =>\r\n        isHit ? `0 .5rem 0 0 ${theme.colors.green}`\r\n            : isClicked ? `0 .5rem  0 0 ${theme.colors.red}`\r\n                : `0 0 .1rem 0 ${theme.colors.gray}`};\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n    opacity: ${({ isClicked }) => isClicked ? '.2' : '1'};\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    cursor: pointer;\r\n`\r\n\r\nconst LetterToClick = ({ letter, clickLetter, isHit, isClicked, isGameEnded }) => (\r\n    <Letter\r\n        isGameEnded={isGameEnded}\r\n        isClicked={isClicked}\r\n        onClick={clickLetter}\r\n        isHit={isHit}\r\n    >\r\n        {letter}\r\n    </Letter>\r\n);\r\n\r\nLetterToClick.propTypes = {\r\n    letter: PropTypes.string.isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n    isHit: PropTypes.bool.isRequired,\r\n    isClicked: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default LetterToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport LetterToClick from './LetterToClick/LetterToClick';\r\n\r\nconst LettersWrapper = styled.div`\r\n    flex-basis: 35%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n`\r\n\r\nconst LettersToClick = ({ lettersToClick, clickLetter, isGameEnded }) => {\r\n\r\n    const letters = lettersToClick.map(letterToClick => (\r\n        <LetterToClick\r\n            clickLetter={(e, key) => clickLetter(e, key)}\r\n            isClicked={letterToClick.isClicked}\r\n            key={letterToClick.letter}\r\n            isHit={letterToClick.isHit}\r\n            letter={letterToClick.letter.toUpperCase()}\r\n            isGameEnded={isGameEnded} />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper\r\n            isGameEnded={isGameEnded}>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n};\r\n\r\n\r\nLettersToClick.propTypes = {\r\n    lettersToClick: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n}\r\nexport default LettersToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport DrawingAndInfoSection from './DrawingAndInfoSection/DrawingAndInfoSection';\r\nimport PhraseToGuessSection from './PhraseToGuessSection/PhraseToGuessSection';\r\nimport LettersToClickSection from './LettersToClickSection/LettersToClickSection';\r\n\r\n\r\nconst InGamePageWrapper = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    transform: ${({ isGameInProgress, isGameEnded }) => isGameInProgress || isGameEnded ? 'translateX(0)' : 'translateX(100%)'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '.4s .4s linear all' : '.4s linear all'};\r\n`\r\n\r\n\r\n\r\n\r\nconst InGamePage = ({ mistakesLeft, timeToNextLetter, phraseToGuess, phraseInfo, lettersToClick, clickLetter, isGameInProgress, isGameEnded }) => (\r\n    <InGamePageWrapper\r\n        isGameEnded={isGameEnded}\r\n        isGameInProgress={isGameInProgress}>\r\n        <DrawingAndInfoSection\r\n            phraseInfo={phraseInfo}\r\n            mistakesLeft={mistakesLeft}\r\n            timeToNextLetter={timeToNextLetter}\r\n        />\r\n        <PhraseToGuessSection\r\n            phraseToGuess={phraseToGuess}\r\n        />\r\n        <LettersToClickSection\r\n            isGameEnded={isGameEnded}\r\n            lettersToClick={lettersToClick}\r\n            clickLetter={clickLetter} />\r\n    </InGamePageWrapper>\r\n);\r\n\r\nInGamePage.propTypes = {\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    phraseInfo: PropTypes.object.isRequired,\r\n    lettersToClick: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n    isGameEnded: PropTypes.bool.isRequired,\r\n}\r\n\r\n\r\nexport default InGamePage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ButtonStyle } from '../Reusable/Buttons/StartGameButton';\r\n\r\nconst EndGameWrapper = styled.div`\r\nposition: absolute;\r\ntop: 0;\r\nbottom: 35%;\r\nleft: 0;\r\nright: 0;\r\nbackground-color:${({ theme }) => theme.colors.deepRed};\r\ntransform: ${({ isGameEnded }) => isGameEnded ? 'translateY(0)' : 'translateY(-100%)'};\r\ntransition: .4s .4s linear all;\r\ncolor: ${({ theme }) => theme.colors.white};\r\nh2,h3,p{\r\n    position: absolute;\r\n    left: 50%;\r\n    transform: ${({ isGameEnded }) => isGameEnded ? 'translateX(-50%)' : 'translateY(-150%)'};\r\n    text-align: center;\r\n    width: 100%;\r\n   \r\n    opacity: ${({ isGameEnded }) => isGameEnded ? '1' : '0'};\r\n    transition: .4s linear all;\r\n}\r\nh2{\r\n    top: 8%;\r\n    font-size: 2em;\r\n    color: ${({ theme }) => theme.colors.winGamePhrase};\r\n}\r\nh3{\r\n    top: 25%;\r\n    font-size: 1.4em;\r\n}\r\np{\r\n    width: 80%;\r\n    top: ${({ isGameWon }) => isGameWon ? '35%' : '35%'};\r\n    color: ${({ theme }) => theme.colors.white};\r\n    font-size: ${({ isGameWon }) => isGameWon ? '1.1em' : '1.8em'};\r\n    font-weight: 500;\r\n    letter-spacing: 2px;\r\n    line-height: 180%;\r\n    text-align: ${({ isGameWon }) => isGameWon && 'justify'};\r\n    bottom: 25%;\r\n    overflow: auto;\r\n}\r\n`\r\n\r\n\r\n\r\nconst ButtonEndGameStyle = styled(ButtonStyle)`\r\ntop: 85%;\r\nheight: 8vh;\r\nwidth: 12em;\r\nfont-size: 1.4em;\r\nbackground-color: ${({ theme }) => theme.colors.deep};\r\ncolor: ${({ theme }) => theme.colors.winGamePhrase};\r\ntransition: none;\r\n\r\n`\r\n\r\n\r\nconst EndGamePage = ({ isGameEnded, isGameWon, phraseToGuess, startGame, titbit }) => {\r\n    const titbitMessage = titbit;\r\n    const winOrLoseMessage = isGameWon ? 'Excellent!' : `Try again!`\r\n    const guessedPhrase = !isGameWon && phraseToGuess.map(phrase => phrase.letter);\r\n\r\n    const winOrLoseContent = <>\r\n        <h2>{winOrLoseMessage}</h2>\r\n        {\r\n            isGameWon ?\r\n                <>\r\n                    <h3>Fun Fact</h3>\r\n                    <p>\r\n                        {titbitMessage}\r\n                    </p>\r\n                </>\r\n                :\r\n                <>\r\n                    <h3>The correct phrase was</h3>\r\n                    <p>\r\n                        {guessedPhrase}\r\n                    </p>\r\n                </>\r\n        }\r\n    </>\r\n\r\n\r\n\r\n    return (\r\n        <EndGameWrapper\r\n            isGameWon={isGameWon}\r\n            isGameEnded={isGameEnded}>\r\n\r\n            {winOrLoseContent}\r\n\r\n            <ButtonEndGameStyle\r\n                onClick={startGame}\r\n                phraseToGuess={phraseToGuess}>Play again\r\n            </ButtonEndGameStyle>\r\n\r\n        </EndGameWrapper>\r\n    );\r\n}\r\nexport default EndGamePage;","import React, { Component } from 'react';\nimport Layout from '../components/Layout/Layout';\nimport StartPage from '../components/StartPage/StartPage';\nimport InGamePage from '../components/InGamePage/InGamePage';\nimport EndGamePage from '../components/EndGamePage/EndGamePage';\nimport axios from 'axios'\nconst TIME_TO_NEXT_LETTER = 7;\nlet allPhrasesFromApi = {};\nconst API = 'https://hangman-239ba.firebaseio.com/.json'\n\nclass App extends Component {\n\n  state = {\n    phraseToGuess: [],          //phrase comes from API in componentDidMount\n    phraseInfo: {\n      category: '',\n      hint: '',\n      titbit: '',\n    },\n    lettersToClick: [           //letters in layout, possible to click or press (keyboard)\n      { letter: 'q', isClicked: false, isHit: false },\n      { letter: 'w', isClicked: false, isHit: false },\n      { letter: 'e', isClicked: false, isHit: false },\n      { letter: 'r', isClicked: false, isHit: false },\n      { letter: 't', isClicked: false, isHit: false },\n      { letter: 'y', isClicked: false, isHit: false },\n      { letter: 'u', isClicked: false, isHit: false },\n      { letter: 'i', isClicked: false, isHit: false },\n      { letter: 'o', isClicked: false, isHit: false },\n      { letter: 'p', isClicked: false, isHit: false },\n      { letter: 'a', isClicked: false, isHit: false },\n      { letter: 's', isClicked: false, isHit: false },\n      { letter: 'd', isClicked: false, isHit: false },\n      { letter: 'f', isClicked: false, isHit: false },\n      { letter: 'g', isClicked: false, isHit: false },\n      { letter: 'h', isClicked: false, isHit: false },\n      { letter: 'j', isClicked: false, isHit: false },\n      { letter: 'k', isClicked: false, isHit: false },\n      { letter: 'l', isClicked: false, isHit: false },\n      { letter: 'z', isClicked: false, isHit: false },\n      { letter: 'x', isClicked: false, isHit: false },\n      { letter: 'c', isClicked: false, isHit: false },\n      { letter: 'v', isClicked: false, isHit: false },\n      { letter: 'b', isClicked: false, isHit: false },\n      { letter: 'n', isClicked: false, isHit: false },\n      { letter: 'm', isClicked: false, isHit: false },\n    ],\n\n    timeToNextLetter: 7,        //if time === 0 => random letter is clicked \n    mistakesLeft: 7,            // if we select wrong letter => mistakes--. If mistakes ===0 => game is over\n    isGameInProgress: false,\n    isGameEnded: false,\n    isGameWon: false,\n  }\n\n  startGameHandler = () => {\n    if (this.state.isGameEnded) {\n      this.giveRandomPhraseHandler(allPhrasesFromApi)\n      this.startID = setTimeout(() => {\n\n        this.setState({\n          lettersToClick: [\n            { letter: 'q', isClicked: false, isHit: false },\n            { letter: 'w', isClicked: false, isHit: false },\n            { letter: 'e', isClicked: false, isHit: false },\n            { letter: 'r', isClicked: false, isHit: false },\n            { letter: 't', isClicked: false, isHit: false },\n            { letter: 'y', isClicked: false, isHit: false },\n            { letter: 'u', isClicked: false, isHit: false },\n            { letter: 'i', isClicked: false, isHit: false },\n            { letter: 'o', isClicked: false, isHit: false },\n            { letter: 'p', isClicked: false, isHit: false },\n            { letter: 'a', isClicked: false, isHit: false },\n            { letter: 's', isClicked: false, isHit: false },\n            { letter: 'd', isClicked: false, isHit: false },\n            { letter: 'f', isClicked: false, isHit: false },\n            { letter: 'g', isClicked: false, isHit: false },\n            { letter: 'h', isClicked: false, isHit: false },\n            { letter: 'j', isClicked: false, isHit: false },\n            { letter: 'k', isClicked: false, isHit: false },\n            { letter: 'l', isClicked: false, isHit: false },\n            { letter: 'z', isClicked: false, isHit: false },\n            { letter: 'x', isClicked: false, isHit: false },\n            { letter: 'c', isClicked: false, isHit: false },\n            { letter: 'v', isClicked: false, isHit: false },\n            { letter: 'b', isClicked: false, isHit: false },\n            { letter: 'n', isClicked: false, isHit: false },\n            { letter: 'm', isClicked: false, isHit: false },\n          ],\n        })\n      }, 400);\n      this.setState({\n        isGameInProgress: true,\n        isGameEnded: false,\n        isGameWon: false,\n        mistakesLeft: 7,\n      })\n    } else if (!this.state.isGameEnded) {\n      this.setState({ isGameInProgress: true, isGameEnded: false });\n    }\n\n  };\n\n  startTimeToNextLetterHandler = () => {\n    if (this.state.isGameEnded) return;\n    this.ID = setInterval(() => {\n      this.setState({ timeToNextLetter: this.state.timeToNextLetter - 1 })\n    }, 1000);\n  }\n\n  isSelectedLetterInPhraseHandler = (selectedLetterObj) => {\n    const { phraseToGuess } = this.state\n    const letterInPhrase = phraseToGuess.find(letterObj => letterObj.letter === selectedLetterObj.letter.toUpperCase())\n    const selectedLetter = selectedLetterObj.letter.toUpperCase()\n    selectedLetterObj.isClicked = true;\n    if (letterInPhrase) {\n      selectedLetterObj.isHit = true;\n      phraseToGuess.forEach(letterObj => {\n        if (letterObj.letter === selectedLetter) {\n          letterObj.isLetterShowed = true;\n        }\n      })\n    }\n    else {\n      this.setState({ mistakesLeft: this.state.mistakesLeft - 1 })\n    }\n  }\n\n  clickOrPressKeyLetterHandler = (e, key) => {\n    if (!this.state.isGameInProgress) return;\n    //Do only if game is not ended\n    if (this.state.isGameEnded || this.state.timeToNextLetter === 0) return;\n\n    const { lettersToClick, phraseToGuess, } = this.state\n    const clickedLetter = e.target.textContent\n    let pressedOrClickedLetter;\n\n    if (key) {\n      pressedOrClickedLetter = key.toUpperCase()\n    }\n    else if (clickedLetter) {\n      pressedOrClickedLetter = e.target.textContent;\n    }\n\n    const index = lettersToClick.findIndex(letter => letter.letter.toUpperCase() === pressedOrClickedLetter);\n\n    if (index === -1 || lettersToClick[index].isClicked) return\n\n    const selectedLetterObj = lettersToClick[index]\n    this.isSelectedLetterInPhraseHandler(selectedLetterObj)\n    clearInterval(this.ID)\n    this.startTimeToNextLetterHandler();\n    this.setState({ phraseToGuess, lettersToClick, timeToNextLetter: TIME_TO_NEXT_LETTER });\n  }\n\n\n  giveRandomPhraseHandler = (data) => {\n    //RANDOM CATEGORY \n    const randomNumberForCategory = Math.floor(Math.random() * Object.keys(data).length);\n    const randomCategoryObject = Object.entries(data)[randomNumberForCategory];\n    const category = randomCategoryObject[0] //position [0] is always category name\n    //RANDOM PHRASE IN THAT CATEGORY\n    const randomNumberForPhrase = Math.floor(Math.random() * Object.keys(randomCategoryObject[1]).length);\n    const randomPhraseObject = Object.entries(randomCategoryObject[1])[randomNumberForPhrase];\n    const phrase = randomPhraseObject[0];   //position [0] is always phrase name\n    //HINT AND TITBIT IN THAT PHRASE\n    const hint = randomPhraseObject[1].hint; //we can easy do random hint or titbit if possible\n    const titbit = randomPhraseObject[1].titbit;\n\n\n    const phraseToGuess = [];\n\n\n    [...phrase].map((phrase, index) => {\n      return phraseToGuess.push({\n        letter: phrase.toUpperCase(),\n        id: index,\n        isLetterShowed: false,\n      })\n    })\n    phraseToGuess.filter(letterObj => (\n      letterObj.letter === \" \" || letterObj.letter === \",\" || letterObj.letter === \"-\" ? letterObj.isLetterShowed = true : letterObj.isLetterShowed = false)\n    )\n    this.setState({\n      phraseToGuess,\n      phraseInfo: {\n        category,\n        hint,\n        titbit,\n      }\n    })\n  }\n\n\n  fetchDataHandler = () => {\n\n    axios.get(API)\n      .then(response => response.statusText ? response : Error)\n      .then(response => {\n        allPhrasesFromApi = response.data;\n        this.giveRandomPhraseHandler(response.data)\n      });\n  }\n\n\n  componentDidUpdate(prevProps, prevState) {\n    //END GAME HANDLER\n    if (this.state.isGameEnded) return;\n    const lettersToClick = prevState.lettersToClick;\n    const allLettersAreShowed = this.state.phraseToGuess.filter(phrase => !phrase.isLetterShowed).length === 0;\n    const noMistakesLeft = this.state.mistakesLeft === 0 && true;\n    if (allLettersAreShowed) this.setState({ isGameWon: true });\n    if (allLettersAreShowed || noMistakesLeft) {\n      clearInterval(this.ID)\n      clearTimeout(this.TimeoutID)\n      this.setState({\n        isGameEnded: true,\n        isGameInProgress: false,\n      })\n    };\n    //END GAME HANDLER\n\n    //AUTO-CLICK LETTER HANDLER\n    if (prevState.timeToNextLetter !== this.state.timeToNextLetter) {\n      const { phraseToGuess } = this.state\n      if (phraseToGuess.filter(phrase => !phrase.isLetterShowed).length === 0) return; // if the phrase is guessed\n      if (lettersToClick.filter(letterObj => !letterObj.isClicked).length === 0) return; // if all letters are clicked\n\n      const filteredLetters = lettersToClick.filter(letterToClick => !letterToClick.isClicked);\n      const random = Math.floor(Math.random() * filteredLetters.length);\n      const autoClicked = filteredLetters[random];   //this is random clicked letter (OBJECT)\n      if (this.state.timeToNextLetter === 0) {\n        this.isSelectedLetterInPhraseHandler(autoClicked);\n        this.setState({ phraseToGuess, lettersToClick });\n        clearInterval(this.ID);\n        this.TimeoutID = setTimeout(() => {\n          this.setState({ timeToNextLetter: TIME_TO_NEXT_LETTER })\n          this.startTimeToNextLetterHandler();\n        }, 1000);\n      };\n    };\n  };\n\n\n\n  componentDidMount() {\n    document.addEventListener('keydown', (e) => this.clickOrPressKeyLetterHandler(e, e.key));\n    this.fetchDataHandler();\n  }\n\n\n\n  componentWillUnmount() {\n\n    document.removeEventListener('keydown', this.clickOrPressKeyLetterHandler())\n  }\n\n  render() {\n    const {\n      phraseToGuess,\n      lettersToClick,\n      timeToNextLetter,\n      mistakesLeft,\n      isGameInProgress,\n      isGameEnded,\n      phraseInfo,\n      isGameWon,\n    } = this.state\n\n    return (\n\n      <Layout\n        isGameInProgress={isGameInProgress}>\n        <StartPage\n          phraseToGuess={phraseToGuess}\n          isGameEnded={isGameEnded}\n          isGameInProgress={isGameInProgress}\n          startGame={this.startGameHandler} />\n        <InGamePage\n          isGameEnded={isGameEnded}\n          isGameInProgress={isGameInProgress}\n          phraseInfo={phraseInfo}\n          phraseToGuess={phraseToGuess}\n          lettersToClick={lettersToClick}\n          timeToNextLetter={timeToNextLetter}\n          mistakesLeft={mistakesLeft}\n          clickLetter={this.clickOrPressKeyLetterHandler}\n        />\n        <EndGamePage\n          titbit={phraseInfo.titbit}\n          startGame={this.startGameHandler}\n          phraseToGuess={phraseToGuess}\n          isGameWon={isGameWon}\n          isGameEnded={isGameEnded} />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}