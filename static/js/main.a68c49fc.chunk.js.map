{"version":3,"sources":["components/PhraseToGuess/Letters/Letter/Letter.js","components/PhraseToGuess/Letters/Letters.js","components/PhraseToGuess/PhraseToGuess.js","components/LettersToClick/LetterToClick/LetterToClick.js","components/LettersToClick/LettersToClick.js","components/Layout/Layout.js","components/HangmanDrawing/HangmanDrawing.js","components/InfoAndHint/InfoAndHint.js","containers/App.js","serviceWorker.js","index.js"],"names":["LetterWrapper","styled","span","_templateObject","letter","_ref","react_default","a","createElement","isShowed","name","LettersWrapper","div","Letters_templateObject","letters","phraseToGuess","map","Letter","key","id","PhraseToGuessWrapper","PhraseToGuess_templateObject","PhraseToGuess","info","Letters","LetterToClick_templateObject","isClicked","isHit","_ref2","_ref3","_ref4","letterToClick","_ref5","clickLetter","console","log","LetterToClick_Letter","onClick","LettersToClick_templateObject","LettersToClick","lettersToClick","LetterToClick","e","toUpperCase","LettersToClick_LettersWrapper","GlobalStyle","createGlobalStyle","Layout_templateObject","Layout","_templateObject2","layout","props","Fragment","children","HangmanDrawingWrapper","HangmanDrawing_templateObject","hangmanDrawing","InfoAndHintWrapper","InfoAndHint_templateObject","infoAndHint","App","state","mistakes","pressLetterHandler","playerLetter","_this$state","_this","index","findIndex","phrase","setState","clickLetterHandler","_this$state2","target","textContent","_this2","this","document","addEventListener","Object","toConsumableArray","push","filter","_this$state3","Layout_Layout","InfoAndHint","HangmanDrawing","components_PhraseToGuess_PhraseToGuess","components_LettersToClick_LettersToClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a68c49fc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport styled from 'styled-components';\r\n\r\nconst LetterWrapper = styled.span`\r\ndisplay: block;\r\nheight: 2.5rem;\r\nwidth: 2.5rem;\r\nfont-size: 20px;\r\n/* margin: auto; */\r\n`\r\n\r\nconst letter = ({ letter }) => {\r\n\r\n    return (\r\n        <LetterWrapper>\r\n            {letter.isShowed ? letter.name : \"_\"}\r\n        </LetterWrapper>\r\n    );\r\n}\r\n\r\n\r\nexport default letter;","import React from 'react';\r\nimport Letter from './Letter/Letter';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\nflex-basis: 60%;\r\nwidth: 90%;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\ntext-align: center;\r\nopacity: .8;\r\n`\r\n\r\n\r\nconst letters = ({ phraseToGuess }) => {\r\n    const letters = phraseToGuess.map(letter => (\r\n        <Letter\r\n            key={letter.id}\r\n            letter={letter}\r\n        />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default letters;","import React from 'react';\r\nimport Letters from './Letters/Letters';\r\nimport styled from 'styled-components';\r\n\r\nconst PhraseToGuessWrapper = styled.div`\r\nflex-basis: 20%;\r\ndisplay: flex;\r\nflex-flow: column wrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbackground-color: #222629;\r\ncolor: #ddd;\r\n`\r\n\r\n\r\nconst PhraseToGuess = ({ phraseToGuess }) => {\r\n\r\n    const info = <p>Great!</p>\r\n    return (\r\n        <PhraseToGuessWrapper>\r\n            <Letters\r\n                phraseToGuess={phraseToGuess}\r\n            />\r\n            {info}\r\n        </PhraseToGuessWrapper>\r\n    );\r\n}\r\n\r\nexport default PhraseToGuess;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Letter = styled.span`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nflex-basis: 10%;\r\nheight: 15%;\r\nmargin: .5rem;\r\nfont-size: 1.4rem;\r\nfont-weight: 700;\r\nbox-shadow:${({ isClicked, isHit }) => isHit ? '0 5px 0 0 #479761' : isClicked ? '0 5px 0 0 #6f2232' : '0 5px 0 0 #fff'};\r\ncolor: ${({ isClicked }) => isClicked ? '#888' : '#000'};\r\nbackground-color: ${({ isClicked }) => isClicked ? '#000' : '#6f6f76'};\r\nopacity: ${({ isClicked }) => isClicked ? '.6' : '1'};\r\ntransition: .5s ease-out all;\r\n`\r\n\r\nconst letterToClick = ({ letter, clickLetter, isHit, isClicked }) => {\r\n    console.log(isHit);\r\n    return (\r\n        <Letter\r\n            isClicked={isClicked}\r\n            onClick={clickLetter}\r\n            isHit={isHit}\r\n        >\r\n            {letter}\r\n        </Letter>\r\n    )\r\n}\r\nexport default letterToClick;","import React from 'react';\r\nimport LetterToClick from './LetterToClick/LetterToClick';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\nflex-grow: 1;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\njustify-content: center;\r\nalign-items: center;\r\nbackground-color: #0b0c10;\r\noverflow: hidden;\r\n`\r\n\r\nconst LettersToClick = ({ lettersToClick, clickLetter }) => {\r\n\r\n    const letters = lettersToClick.map(letterToClick => (\r\n        <LetterToClick\r\n            clickLetter={(e) => { clickLetter(e) }}\r\n            isClicked={letterToClick.isClicked}\r\n            key={letterToClick.letter}\r\n            isHit={letterToClick.isHit}\r\n            letter={letterToClick.letter.toUpperCase()} />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default LettersToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\nmargin: 0;\r\npadding: 0;\r\nbox-sizing: border-box;\r\nfont-weight: normal;\r\ncolor:white;\r\n}\r\n:root{\r\n    font-size: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n}\r\n\r\n`\r\n\r\nconst Layout = styled.div`\r\nbackground-color: #444;\r\nheight: 100vh;\r\noverflow: hidden;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-evenly;\r\nalign-items: center;\r\n&>*{\r\n    width: 100%;\r\n}\r\n`\r\n\r\nconst layout = (props) =>\r\n    (\r\n        <>\r\n            <GlobalStyle />\r\n            <Layout>{props.children}</Layout>\r\n        </>\r\n    )\r\n\r\nexport default layout;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst HangmanDrawingWrapper = styled.div`\r\nflex-basis: 35%;\r\n\r\n`\r\n\r\n\r\nconst hangmanDrawing = () => (\r\n    <HangmanDrawingWrapper />\r\n)\r\nexport default hangmanDrawing;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst InfoAndHintWrapper = styled.div`\r\nflex-basis: 10%;\r\ndisplay: flex;\r\nflex-flow: column nowrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbackground-color: #46344e;\r\n`\r\nconst infoAndHint = props => {\r\n    return (\r\n        <InfoAndHintWrapper>\r\n            <h3>Category: category</h3>\r\n            <h4>Your hint: hint</h4>\r\n        </InfoAndHintWrapper>\r\n    );\r\n}\r\n\r\nexport default infoAndHint;","import React, { Component } from 'react';\nimport PhraseToGuess from '../components/PhraseToGuess/PhraseToGuess';\nimport LettersToClick from '../components/LettersToClick/LettersToClick'\nimport Layout from '../components/Layout/Layout'\nimport HangmanDrawing from '../components/HangmanDrawing/HangmanDrawing'\nimport InfoAndHint from '../components/InfoAndHint/InfoAndHint';\n\nclass App extends Component {\n\n  state = {\n\n    phraseToGuess: [],\n    lettersToClick: [\n      { letter: 'a', isClicked: false, isHit: false },\n      { letter: 'b', isClicked: false, isHit: false },\n      { letter: 'c', isClicked: false, isHit: false },\n      { letter: 'd', isClicked: false, isHit: false },\n      { letter: 'e', isClicked: false, isHit: false },\n      { letter: 'f', isClicked: false, isHit: false },\n      { letter: 'g', isClicked: false, isHit: false },\n      { letter: 'h', isClicked: false, isHit: false },\n      { letter: 'i', isClicked: false, isHit: false },\n      { letter: 'j', isClicked: false, isHit: false },\n      { letter: 'k', isClicked: false, isHit: false },\n      { letter: 'l', isClicked: false, isHit: false },\n      { letter: 'm', isClicked: false, isHit: false },\n      { letter: 'n', isClicked: false, isHit: false },\n      { letter: 'o', isClicked: false, isHit: false },\n      { letter: 'p', isClicked: false, isHit: false },\n      { letter: 'q', isClicked: false, isHit: false },\n      { letter: 'r', isClicked: false, isHit: false },\n      { letter: 's', isClicked: false, isHit: false },\n      { letter: 't', isClicked: false, isHit: false },\n      { letter: 'u', isClicked: false, isHit: false },\n      { letter: 'v', isClicked: false, isHit: false },\n      { letter: 'w', isClicked: false, isHit: false },\n      { letter: 'y', isClicked: false, isHit: false },\n      { letter: 'x', isClicked: false, isHit: false },\n      { letter: 'z', isClicked: false, isHit: false },\n    ],\n    mistakes: 0,\n  }\n\n\n\n  // THESE TWO FUNCTION CAN BE ONE\n\n  pressLetterHandler = (playerLetter) => {\n    const { lettersToClick, phraseToGuess } = this.state;\n    const index = lettersToClick.findIndex(letterToClick => (\n      letterToClick.letter.toUpperCase() === playerLetter)\n    );\n    if (lettersToClick[index].isClicked) return\n    if (index !== -1) {\n      lettersToClick[index].isClicked = true\n\n      phraseToGuess.map(phrase => {\n        if (phrase.name === playerLetter) {\n          phrase.isShowed = true;\n          lettersToClick[index].isHit = true;\n        }\n      }\n      )\n      this.setState({ phraseToGuess, lettersToClick });\n    } else return;\n  }\n\n  clickLetterHandler = (e) => {\n    const { lettersToClick, phraseToGuess, } = this.state\n    const target = e.target.textContent;\n\n    const index = lettersToClick.findIndex(letterToClick => (\n      letterToClick.letter.toUpperCase() === target.toUpperCase()\n    ));\n    lettersToClick[index].isClicked = true\n    phraseToGuess.map(phrase => {\n      if (phrase.name === target) {\n        phrase.isShowed = true;\n        lettersToClick[index].isHit = true;\n      }\n    }\n    )\n\n    this.setState({ phraseToGuess, lettersToClick });\n\n  }\n\n\n\n  componentWillMount() {\n    document.addEventListener(\"keypress\", (e) => this.pressLetterHandler(e.key.toUpperCase()))\n\n  }\n\n  componentDidMount() {\n    const fetchedPhrase = 'Sahara Desert';\n    const { phraseToGuess } = this.state;\n    [...fetchedPhrase].map((phrase, index) => {\n      return phraseToGuess.push({\n        name: phrase.toUpperCase(),\n        id: index,\n        isShowed: false,\n      })\n    })\n    phraseToGuess.filter(phrase => (\n      phrase.name === \" \" || phrase.name === \",\" || phrase.name === \"-\" ? phrase.isShowed = true : phrase.isShowed = false)\n    )\n    this.setState({ phraseToGuess })\n  }\n\n\n  render() {\n    console.log(this.state.lettersToClick);\n    const { phraseToGuess, lettersToClick } = this.state\n    return (\n      <Layout>\n        <InfoAndHint />\n        <HangmanDrawing />\n        <PhraseToGuess\n          phraseToGuess={phraseToGuess}\n        />\n        <LettersToClick\n          lettersToClick={lettersToClick}\n          clickLetter={this.clickLetterHandler}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}