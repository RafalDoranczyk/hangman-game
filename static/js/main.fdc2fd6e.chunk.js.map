{"version":3,"sources":["components/Layout/Layout.js","components/DrawingAndInfoSection/HangmanDrawing/HangmanParts/HangmanParts.js","components/DrawingAndInfoSection/HangmanDrawing/HangmanDrawing.js","components/DrawingAndInfoSection/GameInfo/GameInfo.js","components/DrawingAndInfoSection/DrawingAndInfoSection.js","components/PhraseToGuessSection/Letters/Letter/Letter.js","components/PhraseToGuessSection/Letters/Letters.js","components/PhraseToGuessSection/PhraseToGuessSection.js","components/LettersToClickSection/LetterToClick/LetterToClick.js","components/LettersToClickSection/LettersToClickSection.js","containers/App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","_templateObject","Layout","styled","div","_templateObject2","layout","props","react_default","a","createElement","Fragment","children","Body","HangmanParts_templateObject","Head","HangmanParts_templateObject2","_templateObject3","_templateObject4","_templateObject5","HangmanDrawingWrapper","HangmanDrawing_templateObject","hangmanDrawingSection","_ref","content","mistakesLeft","GameInfoWrapper","GameInfo_templateObject","GameInfoSection","timeToNextLetter","DrawingAndInfoSectionWrapper","DrawingAndInfoSection_templateObject","DrawingAndInfoSection","HangmanDrawing","GameInfo","LetterWrapper","span","Letter_templateObject","letter","letterObj","isLetterShowed","LettersWrapper","Letters_templateObject","BreakLine","Letters_templateObject2","letters","phraseToGuess","map","Letter","key","id","PhraseToGuessWrapper","PhraseToGuessSection_templateObject","PhraseToGuess","Letters","LetterToClick_templateObject","isClicked","_ref2","isHit","_ref3","_ref4","_ref5","letterToClick","_ref6","clickLetter","LetterToClick_Letter","onClick","LettersToClickSection_templateObject","LettersToClick","lettersToClick","LetterToClick","e","toUpperCase","LettersToClickSection_LettersWrapper","App","state","startTimeToNextLetterHandler","_this","ID","setInterval","setState","isSelectedLetterInPhraseHandler","selectedLetterObj","letterInPhrase","find","selectedLetter","forEach","clickOrPressKeyLetterHandler","pressedOrClickedLetter","_this$state","clickedLetter","target","textContent","index","findIndex","clearInterval","prevProps","prevState","_this2","this","filteredLetters","filter","autoClicked","Math","floor","random","length","setTimeout","_this3","document","addEventListener","Object","toConsumableArray","phrase","push","removeEventListener","_this$state2","Layout_Layout","components_DrawingAndInfoSection_DrawingAndInfoSection","PhraseToGuessSection","LettersToClickSection","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fdc2fd6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\nmargin: 0;\r\npadding: 0;\r\nbox-sizing: border-box;\r\nfont-weight: normal;\r\ncolor:white;\r\n}\r\n:root{\r\n    font-size: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n}\r\n\r\n`\r\n\r\nconst Layout = styled.div`\r\nbackground-color: #444;\r\nheight: 100vh;\r\noverflow: hidden;\r\ndisplay: flex;\r\nflex-flow: column wrap;\r\njustify-content: space-evenly;\r\nalign-items: center;\r\n`\r\n\r\nconst layout = (props) =>\r\n    (\r\n        <>\r\n            <GlobalStyle />\r\n            <Layout>{props.children}</Layout>\r\n        </>\r\n    )\r\n\r\nexport default layout;","import styled from 'styled-components';\r\n\r\nexport const Body = styled.div`\r\n    height: 30%;\r\n    width: .3rem;\r\n    background-color: #D6D6D8;\r\n    position: absolute;\r\n    top: calc(20% + 3rem);\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n`\r\nexport const Head = styled.div`\r\n    position: absolute;\r\n    top: 20%;\r\n    left: 50%;\r\n    height: 3rem;\r\n    width: 3rem;\r\n    transform: translateX(-50%);\r\n    border-radius: 50%;\r\n    border: 1px solid white;\r\n    ::after,::before{\r\n        content: '';\r\n        position: absolute;\r\n        top: 20%;\r\n        width: 10%;\r\n        height: 10%;\r\n        border-radius: 50%;\r\n        background-color: #D6D6D8\r\n    }\r\n    ::after{\r\n        left: 25%;\r\n    \r\n    }\r\n    ::before{\r\n        right: 25%;\r\n    }\r\n`\r\n\r\nexport const LeftArm = styled.div`\r\n    height: 60%;\r\n    width: .1rem;\r\n    background-color: #D6D6D8;\r\n    position: absolute;\r\n    left: -5%;\r\n    top: 10%;\r\n    transform-origin: top left;\r\n    transform: rotate(-70deg) translateX(-50%);\r\n`\r\n\r\nexport const LeftLeg = styled.div`\r\n    height: 60%;\r\n    width: .1rem;\r\n    background-color: #D6D6D8;\r\n    position: absolute;\r\n    left: -5%;\r\n    top: 70%;\r\n    transform-origin: top left;\r\n    transform: rotate(-30deg) translateX(-50%);\r\n`\r\n\r\nexport const RightArm = styled.div`\r\n    height: 60%;\r\n    width: .1rem;\r\n    background-color: #D6D6D8;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 10%;\r\n    transform-origin: top left;\r\n    transform: rotate(70deg) translateX(-50%);\r\n`","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Body, Head, LeftArm, LeftLeg, RightArm } from './HangmanParts/HangmanParts'\r\n\r\nconst HangmanDrawingWrapper = styled.div`\r\nflex-basis: 50%;\r\nbackground-color: #0B091F;\r\nposition: relative;\r\ntop: 0;\r\nleft:0;\r\n`\r\n\r\n\r\n\r\n\r\nconst hangmanDrawingSection = ({ mistakesLeft }) => {\r\n    let content;\r\n    switch (mistakesLeft) {\r\n        case (6):\r\n            content = <Body />;\r\n            break;\r\n        case (5):\r\n            content = <> <Body /> <Head /> </>\r\n            break;\r\n    }\r\n\r\n\r\n    return (\r\n        <HangmanDrawingWrapper>\r\n\r\n\r\n\r\n            {content}\r\n\r\n        </HangmanDrawingWrapper>)\r\n\r\n}\r\nexport default hangmanDrawingSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst GameInfoWrapper = styled.div`\r\nflex-basis: 50%;\r\nbackground-color: #D6D6D8;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\ntext-align: center;\r\n&::after{\r\n    content: '';\r\n    position: absolute;\r\n    top: -20px;\r\n    left: calc(50% - 25px);\r\n    height: 120%;\r\n    background-color: #D6D6D8;\r\n    width: 30px;\r\n    transform: rotate(5deg);\r\n    transform-origin: 0 100%;\r\n}\r\n\r\ndiv{\r\n    flex-basis: 85%;\r\n    height: 100%;\r\n    /* background-color: red; */\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n \r\n}\r\ndiv *{\r\n  letter-spacing: 1px;\r\n    color: #000;\r\n    margin-top: 5%;\r\n}\r\nem{\r\n    display: block;\r\n    width: 100%;\r\n}\r\n\r\n`\r\n\r\n\r\nconst GameInfoSection = ({ timeToNextLetter }) => {\r\n    return (\r\n        <GameInfoWrapper>\r\n            <div>\r\n\r\n                <h3>Category: <em>Famous Buildigings</em></h3>\r\n                <h4>Hint: <em>One of the highest bulding in the world</em></h4>\r\n                <h3>Next letter appears in: <em>{timeToNextLetter} s</em></h3>\r\n            </div>\r\n        </GameInfoWrapper>\r\n    );\r\n}\r\n\r\nexport default GameInfoSection;","import React from 'react';\r\nimport HangmanDrawing from './HangmanDrawing/HangmanDrawing';\r\nimport GameInfo from './GameInfo/GameInfo';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst DrawingAndInfoSectionWrapper = styled.div`\r\nflex-basis: 35%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: row nowrap;\r\noverflow: hidden;\r\nposition: relative;\r\ntop: 0;\r\nleft: 0;\r\n\r\n`\r\nconst DrawingAndInfoSection = ({ timeToNextLetter, mistakesLeft }) => (\r\n    <DrawingAndInfoSectionWrapper>\r\n\r\n        <HangmanDrawing\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <GameInfo\r\n            timeToNextLetter={timeToNextLetter}\r\n        />\r\n    </DrawingAndInfoSectionWrapper>\r\n)\r\n\r\nexport default DrawingAndInfoSection;","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components';\r\n\r\nconst LetterWrapper = styled.span`\r\ndisplay: block;\r\nheight: 1.5rem;\r\nwidth: 1.5rem;\r\nfont-size: 2rem;\r\nmargin-left: 1rem;\r\n`\r\n\r\n\r\nconst letter = ({ letterObj }) => {\r\n    return (\r\n        <LetterWrapper>\r\n\r\n            {letterObj.isLetterShowed ? letterObj.letter : \"_\"}\r\n        </LetterWrapper>\r\n    );\r\n}\r\n\r\n\r\nexport default letter;","import React from 'react';\r\nimport Letter from './Letter/Letter';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\nflex-basis: 90%;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\nalign-items: center;\r\njustify-content: center;\r\nalign-content: space-around;\r\ntext-align: center;\r\n`\r\nconst BreakLine = styled.div`\r\nflex-basis: 100%;\r\nheight: 1%;\r\n`\r\n\r\n\r\n\r\nconst letters = ({ phraseToGuess }) => {\r\n\r\n    const letters = phraseToGuess.map(letterObj => {\r\n        let letters;\r\n        if (letterObj.letter !== \" \") {\r\n            letters = <Letter\r\n                key={letterObj.id}\r\n                letterObj={letterObj}\r\n            />\r\n        }\r\n        else if (letterObj.letter === \" \") {\r\n            letters = <BreakLine />\r\n        }\r\n        return letters;\r\n    }\r\n    )\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default letters;","import React from 'react';\r\nimport Letters from './Letters/Letters';\r\nimport styled from 'styled-components';\r\n\r\nconst PhraseToGuessWrapper = styled.div`\r\nflex-basis: 25%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: column wrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbackground-color: #000;\r\ncolor: #050311;\r\n`\r\n\r\nconst PhraseToGuess = ({ phraseToGuess }) => {\r\n\r\n    return (\r\n        <PhraseToGuessWrapper>\r\n            <Letters\r\n\r\n                phraseToGuess={phraseToGuess}\r\n            />\r\n\r\n        </PhraseToGuessWrapper>\r\n    );\r\n}\r\n\r\nexport default PhraseToGuess;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Letter = styled.span`\r\nflex-basis: 10%;\r\nheight: 15%;\r\nmargin: .5rem;\r\nfont-size: 1.5rem;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nborder-radius: 5px;\r\nfont-weight: 400;\r\ntransform: ${({ isClicked }) => isClicked && 'translateY(.3rem)'};  \r\nbox-shadow:${({ isClicked, isHit }) => isHit ? '0 .5rem 0 0 #69a982' : isClicked ? '0 .5rem  0 0 #6f2232' : '0 0 .1rem 0 #D6D6D8'};\r\ncolor: ${({ isClicked }) => isClicked ? '#53516F' : '#D6D6D8'};\r\nbackground-color: ${({ isClicked }) => isClicked ? '#15142E' : '#000'};\r\nopacity: ${({ isClicked }) => isClicked ? '.5' : '1'};\r\ntransition-duration: .1s;\r\ntransition-property: color, background-color, opacity, box-shadow;\r\ncursor: pointer;\r\n`\r\n\r\nconst letterToClick = ({ letter, clickLetter, isHit, isClicked }) => {\r\n\r\n\r\n    return (\r\n        <Letter\r\n\r\n            isClicked={isClicked}\r\n            onClick={clickLetter}\r\n            isHit={isHit}\r\n        >\r\n            {letter}\r\n        </Letter>\r\n    )\r\n}\r\n\r\nexport default letterToClick;","import React from 'react';\r\nimport LetterToClick from './LetterToClick/LetterToClick';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\nflex-basis: 40%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\njustify-content: center;\r\nalign-items: center;\r\nbackground-color: #0B091F;\r\n`\r\n\r\nconst LettersToClick = ({ lettersToClick, clickLetter }) => {\r\n\r\n    const letters = lettersToClick.map(letterToClick => (\r\n        <LetterToClick\r\n            clickLetter={(e, key) => clickLetter(e, key)}\r\n            isClicked={letterToClick.isClicked}\r\n            key={letterToClick.letter}\r\n            isHit={letterToClick.isHit}\r\n            letter={letterToClick.letter.toUpperCase()} />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default LettersToClick;","import React, { Component } from 'react';\nimport Layout from '../components/Layout/Layout';\nimport DrawingAndInfoSectionWrapper from '../components/DrawingAndInfoSection/DrawingAndInfoSection';\nimport PhraseToGuessSection from '../components/PhraseToGuessSection/PhraseToGuessSection';\nimport LettersToClickSection from '../components/LettersToClickSection/LettersToClickSection';\n\n\nconst API = ' https://hangman-239ba.firebaseio.com/.json';\n\nclass App extends Component {\n\n  state = {\n    phraseToGuess: [],                                //phrase comes from API in componentDidMount\n    lettersToClick: [                                 //letters in layout, possible to click or press (keyboard)\n      { letter: 'a', isClicked: false, isHit: false },\n      { letter: 'b', isClicked: false, isHit: false },\n      { letter: 'c', isClicked: false, isHit: false },\n      { letter: 'd', isClicked: false, isHit: false },\n      { letter: 'e', isClicked: false, isHit: false },\n      { letter: 'f', isClicked: false, isHit: false },\n      { letter: 'g', isClicked: false, isHit: false },\n      { letter: 'h', isClicked: false, isHit: false },\n      { letter: 'i', isClicked: false, isHit: false },\n      { letter: 'j', isClicked: false, isHit: false },\n      { letter: 'k', isClicked: false, isHit: false },\n      { letter: 'l', isClicked: false, isHit: false },\n      { letter: 'm', isClicked: false, isHit: false },\n      { letter: 'n', isClicked: false, isHit: false },\n      { letter: 'o', isClicked: false, isHit: false },\n      { letter: 'p', isClicked: false, isHit: false },\n      { letter: 'q', isClicked: false, isHit: false },\n      { letter: 'r', isClicked: false, isHit: false },\n      { letter: 's', isClicked: false, isHit: false },\n      { letter: 't', isClicked: false, isHit: false },\n      { letter: 'u', isClicked: false, isHit: false },\n      { letter: 'v', isClicked: false, isHit: false },\n      { letter: 'w', isClicked: false, isHit: false },\n      { letter: 'y', isClicked: false, isHit: false },\n      { letter: 'x', isClicked: false, isHit: false },\n      { letter: 'z', isClicked: false, isHit: false },\n    ],\n    timeToNextLetter: 5,                              //if time === 0 => random letter is clicked \n    mistakesLeft: 6,                                  // if we select wrong letter => mistakes--. If mistakes ===0 => game is over\n  }\n\n  startTimeToNextLetterHandler = () => {\n    this.ID = setInterval(() => {\n      this.setState({ timeToNextLetter: this.state.timeToNextLetter - 1 })\n    }, 1000);\n  }\n\n  isSelectedLetterInPhraseHandler = (selectedLetterObj) => {\n    const { phraseToGuess } = this.state\n    const letterInPhrase = phraseToGuess.find(letterObj => letterObj.letter === selectedLetterObj.letter.toUpperCase())\n    const selectedLetter = selectedLetterObj.letter.toUpperCase()\n    selectedLetterObj.isClicked = true;\n    if (letterInPhrase) {\n      selectedLetterObj.isHit = true;\n      phraseToGuess.forEach(letterObj => {\n        if (letterObj.letter === selectedLetter) {\n          letterObj.isLetterShowed = true;\n        }\n      })\n    }\n    else {\n      this.setState({ mistakesLeft: this.state.mistakesLeft - 1 })\n    }\n  }\n\n  clickOrPressKeyLetterHandler = (e, key) => {\n    const { lettersToClick, phraseToGuess, } = this.state\n    const clickedLetter = e.target.textContent\n    let pressedOrClickedLetter;\n\n    if (key) {\n      pressedOrClickedLetter = key.toUpperCase()\n    }\n    else if (clickedLetter) {\n      pressedOrClickedLetter = e.target.textContent;\n    }\n\n    const index = lettersToClick.findIndex(letter => letter.letter.toUpperCase() === pressedOrClickedLetter);\n\n    if (index === -1 || lettersToClick[index].isClicked) return\n\n    const selectedLetterObj = lettersToClick[index]\n    this.isSelectedLetterInPhraseHandler(selectedLetterObj)\n    clearInterval(this.ID)\n    this.setState({ phraseToGuess, lettersToClick, timeToNextLetter: 5 });\n    this.startTimeToNextLetterHandler();\n  }\n\n  //autoclick letter\n  componentDidUpdate(prevProps, prevState) {\n\n    if (prevState.timeToNextLetter !== this.state.timeToNextLetter) {\n      const { phraseToGuess } = this.state\n      const lettersToClick = prevState.lettersToClick;\n      const filteredLetters = lettersToClick.filter(letterToClick => !letterToClick.isClicked);\n      const random = Math.floor(Math.random() * filteredLetters.length);\n      //this is random clicked letter\n      const autoClicked = filteredLetters[random];\n\n      if (this.state.timeToNextLetter === 0) {\n        this.isSelectedLetterInPhraseHandler(autoClicked);\n        this.setState({ phraseToGuess, lettersToClick });\n        clearInterval(this.ID);\n        setTimeout(() => {\n          this.setState({ timeToNextLetter: 5 })\n          this.startTimeToNextLetterHandler();\n        }, 1000)\n      }\n\n    }\n\n  }\n\n  componentDidMount() {\n\n    // this.startTimeToNextLetterHandler()\n    document.addEventListener('keypress', (e) => this.clickOrPressKeyLetterHandler(e, e.key));\n    const fetchedPhrase = 'Great Wall of China';\n    const { phraseToGuess } = this.state;\n    [...fetchedPhrase].map((phrase, index) => {\n      return phraseToGuess.push({\n        letter: phrase.toUpperCase(),\n        id: index,\n        isLetterShowed: false,\n      })\n    })\n    phraseToGuess.filter(letterObj => (\n      letterObj.letter === \" \" || letterObj.letter === \",\" || letterObj.letter === \"-\" ? letterObj.isLetterShowed = true : letterObj.isLetterShowed = false)\n    )\n    this.setState({ phraseToGuess })\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keypress', this.clickOrPressKeyLetterHandler)\n  }\n\n  render() {\n    const {\n      phraseToGuess,\n      lettersToClick,\n      timeToNextLetter,\n      mistakesLeft\n    } = this.state\n\n    return (\n\n      <Layout>\n        <DrawingAndInfoSectionWrapper\n          mistakesLeft={mistakesLeft}\n          timeToNextLetter={timeToNextLetter}\n        />\n        <PhraseToGuessSection\n          phraseToGuess={phraseToGuess}\n        />\n        <LettersToClickSection\n          lettersToClick={lettersToClick}\n          clickLetter={this.clickOrPressKeyLetterHandler}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}