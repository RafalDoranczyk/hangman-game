{"version":3,"sources":["components/PhraseToGuess/Letter/Letter.js","components/PhraseToGuess/Hint/Hint.js","components/PhraseToGuess/PhraseToGuess.js","components/LettersToClick/LetterToClick/LetterToClick.js","components/LettersToClick/LettersToClick.js","components/Layout/Layout.js","containers/App.js","serviceWorker.js","index.js"],"names":["letter","_ref","react_default","a","createElement","isShowed","name","hint","props","PhraseToGuess","playerLetter","letters","phraseToGuess","map","Letter","key","id","message","Fragment","Hint","styled","span","_templateObject","isClicked","letterToClick","_ref2","clickLetter","LetterToClick_Letter","onClick","LettersWrapper","div","LettersToClick_templateObject","LettersToClick","lettersToClick","LetterToClick","e","toUpperCase","GlobalStyle","createGlobalStyle","Layout_templateObject","Layout","_templateObject2","layout","children","App","state","mistakes","pressLetterHandler","_this$state","_this","index","findIndex","setState","phrase","clickLetterHandler","_this$state2","target","textContent","console","log","_this2","this","document","addEventListener","Object","toConsumableArray","push","_this$state3","Layout_Layout","components_PhraseToGuess_PhraseToGuess","components_LettersToClick_LettersToClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b354297a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst letter = ({ letter }) => (\r\n    <span>   {letter.isShowed ? letter.name : '_ '} </span>\r\n);\r\n\r\n\r\nexport default letter;","import React from 'react';\r\n\r\nconst hint = props => (\r\n    <h4>hint</h4>\r\n)\r\n\r\nexport default hint;","import React from 'react';\r\nimport Letter from './Letter/Letter';\r\nimport Hint from './Hint/Hint';\r\n// import styled from 'styled-components'\r\n\r\n\r\nconst PhraseToGuess = ({ playerLetter, phraseToGuess }) => {\r\n    const letters = phraseToGuess.map(letter => (\r\n        <Letter\r\n            key={letter.id}\r\n            letter={letter}\r\n        />\r\n    ))\r\n\r\n    const message = playerLetter ?\r\n        <h2>Your last letter: {playerLetter}</h2> :\r\n        <h2>Press or click key to start!</h2>\r\n\r\n    return (\r\n        <>\r\n            {message}\r\n            <Hint />\r\n            {letters}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PhraseToGuess;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Letter = styled.span`\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nborder: 2px solid black;\r\nheight: 4rem;\r\nwidth: 4rem;\r\nmargin: 10px;\r\nbackground-color: ${({ isClicked }) => isClicked ? '#222' : '#aaa'};\r\n`\r\n\r\nconst letterToClick = ({ letter, isClicked, clickLetter }) => {\r\n    return (\r\n        <Letter\r\n            onClick={clickLetter}\r\n            isClicked={isClicked}\r\n        >{letter}</Letter>\r\n    )\r\n}\r\nexport default letterToClick;","import React from 'react';\r\nimport LetterToClick from './LetterToClick/LetterToClick';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\nmargin-top: 100px;\r\n`\r\n\r\nconst LettersToClick = ({ lettersToClick, clickLetter }) => {\r\n\r\n    const letters = lettersToClick.map(letterToClick => (\r\n        <LetterToClick\r\n            clickLetter={(e) => { clickLetter(e) }}\r\n            key={letterToClick.letter}\r\n            isClicked={letterToClick.isClicked}\r\n            letter={letterToClick.letter.toUpperCase()} />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default LettersToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\nmargin: 0;\r\npadding: 0;\r\nbox-sizing: border-box;\r\n}\r\n:root{\r\n    font-size: 10px;\r\n}\r\n\r\n`\r\n\r\nconst Layout = styled.div`\r\nbackground-color: #444;\r\nmin-height: 100vh;\r\n`\r\n\r\nconst layout = (props) =>\r\n    (\r\n        <>\r\n            <GlobalStyle />\r\n            <Layout>{props.children}</Layout>\r\n        </>\r\n    )\r\n\r\nexport default layout;","import React, { Component } from 'react';\nimport PhraseToGuess from '../components/PhraseToGuess/PhraseToGuess';\nimport LettersToClick from '../components/LettersToClick/LettersToClick'\nimport Layout from '../components/Layout/Layout'\n\n\nclass App extends Component {\n\n  state = {\n    playerLetter: '',\n    phraseToGuess: [],\n    lettersToClick: [\n      { letter: 'a', isClicked: false },\n      { letter: 'b', isClicked: false },\n      { letter: 'c', isClicked: false },\n      { letter: 'd', isClicked: false },\n      { letter: 'e', isClicked: false },\n      { letter: 'f', isClicked: false },\n      { letter: 'g', isClicked: false },\n      { letter: 'h', isClicked: false },\n      { letter: 'i', isClicked: false },\n      { letter: 'j', isClicked: false },\n      { letter: 'k', isClicked: false },\n      { letter: 'l', isClicked: false },\n      { letter: 'm', isClicked: false },\n      { letter: 'n', isClicked: false },\n      { letter: 'o', isClicked: false },\n      { letter: 'p', isClicked: false },\n      { letter: 'q', isClicked: false },\n      { letter: 'r', isClicked: false },\n      { letter: 's', isClicked: false },\n      { letter: 't', isClicked: false },\n      { letter: 'u', isClicked: false },\n      { letter: 'v', isClicked: false },\n      { letter: 'w', isClicked: false },\n      { letter: 'y', isClicked: false },\n      { letter: 'z', isClicked: false },\n    ],\n    mistakes: 0,\n  }\n\n\n\n  // THESE TWO FUNCTION CAN BE ONE\n\n  pressLetterHandler = (playerLetter) => {\n    const { phraseToGuess, lettersToClick } = this.state\n    const index = lettersToClick.findIndex(letterToClick => (\n      letterToClick.letter.toUpperCase() === playerLetter.toUpperCase()));\n\n    if (index !== -1) {\n      if (lettersToClick[index].isClicked) return\n\n      this.setState({ playerLetter })\n      lettersToClick[index].isClicked = true\n      phraseToGuess.map(phrase => phrase.name === playerLetter ? phrase.isShowed = true : false\n      );\n      this.setState({ phraseToGuess, lettersToClick });\n    } else return;\n  }\n\n  clickLetterHandler = (e) => {\n    const { lettersToClick, phraseToGuess, } = this.state\n    const target = e.target.textContent;\n\n    const index = lettersToClick.findIndex(letterToClick => (\n      letterToClick.letter.toUpperCase() === target.toUpperCase()\n    ));\n    if (!lettersToClick[index].isClicked) {\n      this.setState({ playerLetter: target })\n    }\n    lettersToClick[index].isClicked = true\n    phraseToGuess.map(phrase => phrase.name === target ? phrase.isShowed = true : false\n    );\n\n    console.log(lettersToClick[index]);\n    this.setState({ phraseToGuess, lettersToClick });\n\n  }\n\n\n\n  componentWillMount() {\n    document.addEventListener(\"keypress\", (e) => this.pressLetterHandler(e.key.toUpperCase()))\n\n  }\n\n  componentDidMount() {\n    const fetchedPhrase = 'aleksander';\n    const { phraseToGuess } = this.state;\n    [...fetchedPhrase].map((phrase, index) => {\n      return phraseToGuess.push({\n        name: phrase.toUpperCase(),\n        id: index,\n        isShowed: false,\n      })\n    })\n    this.setState({ phraseToGuess })\n  }\n\n\n  render() {\n\n    const { playerLetter, phraseToGuess, lettersToClick } = this.state\n    return (\n      <Layout>\n        <PhraseToGuess\n          phraseToGuess={phraseToGuess}\n          playerLetter={playerLetter} />\n        <LettersToClick\n          lettersToClick={lettersToClick}\n          clickLetter={this.clickLetterHandler}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}