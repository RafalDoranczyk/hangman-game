{"version":3,"sources":["theme/theme.js","components/Layout/Layout.js","components/InGamePage/DrawingAndInfoSection/HangmanDrawing/Hangman/Hangman.js","components/StartPage/Buttons/StartGameButton.js","components/StartPage/Buttons/GameInfoButton.js","components/StartPage/StartPage.js","components/InGamePage/DrawingAndInfoSection/HangmanDrawing/HangmanDrawing.js","components/InGamePage/DrawingAndInfoSection/GameInfo/GameInfo.js","components/InGamePage/DrawingAndInfoSection/DrawingAndInfoSection.js","components/InGamePage/PhraseToGuessSection/Letters/Letter/Letter.js","components/InGamePage/PhraseToGuessSection/Letters/Letters.js","components/InGamePage/PhraseToGuessSection/PhraseToGuessSection.js","components/InGamePage/LettersToClickSection/LetterToClick/LetterToClick.js","components/InGamePage/LettersToClickSection/LettersToClickSection.js","components/InGamePage/InGamePage.js","components/EndGamePage/EndGamePage.js","containers/App.js","serviceWorker.js","index.js"],"names":["theme","colors","white","black","gray","deep","green","red","deepRed","GlobalStyle","createGlobalStyle","_templateObject","_ref","LayoutWrapper","styled","div","_templateObject2","Layout","_ref2","isGameInProgress","children","react_default","a","createElement","styled_components_browser_esm","Fragment","StylesForAllParts","Hangman_templateObject","GallowsBasis","Hangman_templateObject2","GallowBranch","_templateObject3","GallowTopBranch","_templateObject4","GallowsNoose","_templateObject5","_ref3","mistakesLeft","Head","_templateObject6","_ref4","Body","_templateObject7","_ref5","StylesForArms","_templateObject8","LeftArm","_templateObject9","_ref6","RightArm","_templateObject10","_ref7","StylesForLegs","_templateObject11","LeftLeg","_templateObject12","_ref8","RightLeg","_templateObject13","_ref9","Hangman","_ref10","ButtonStyle","button","StartGameButton_templateObject","disabled","StartGameButton","startGame","phraseToGuess","text","length","onClick","ButtonInfoStyle","GameInfoButton_templateObject","GameInfoButton","StartPageWrapper","StartPage_templateObject","isGameEnded","HangmanWapper","StartPage_templateObject2","StartPage","HangmanDrawing_Hangman_Hangman","Buttons_StartGameButton","Buttons_GameInfoButton","HangmanSectionWrapper","HangmanDrawing_templateObject","HangmanDrawingSection","GameInfoWrapper","GameInfo_templateObject","Info","GameInfo_templateObject2","Category","p","GameInfo_templateObject3","Hint","GameInfo_templateObject4","MistakesLeft","GameInfo_templateObject5","TimeToNextLetterWrapper","GameInfo_templateObject6","GameInfoSection","timeToNextLetter","questionInfo","category","hint","DrawingAndInfoSectionWrapper","DrawingAndInfoSection_templateObject","DrawingAndInfoSection","HangmanDrawing","GameInfo","LetterWrapper","span","Letter_templateObject","Letter","letterObj","isLetterShowed","letter","LettersWrapper","Letters_templateObject","BreakLine","Letters_templateObject2","Letters","letters","map","Letters_Letter_Letter","key","id","PhraseToGuessWrapper","PhraseToGuessSection_templateObject","PhraseToGuess","PhraseToGuessSection_Letters_Letters","LetterToClick_templateObject","isClicked","isHit","concat","LetterToClick","clickLetter","LetterToClick_Letter","LettersToClickSection_templateObject","LettersToClick","lettersToClick","letterToClick","LettersToClickSection_LetterToClick_LetterToClick","e","toUpperCase","LettersToClickSection_LettersWrapper","InGamePageWrapper","InGamePage_templateObject","InGamePage","InGamePage_DrawingAndInfoSection_DrawingAndInfoSection","PhraseToGuessSection","LettersToClickSection","EndGameWrapper","EndGamePage_templateObject","EndGamePage","TIME_TO_NEXT_LETTER","API","App","state","startGameHandler","_this","setState","startTimeToNextLetterHandler","ID","setInterval","isSelectedLetterInPhraseHandler","selectedLetterObj","letterInPhrase","find","selectedLetter","forEach","clickOrPressKeyLetterHandler","pressedOrClickedLetter","_this$state","clickedLetter","target","textContent","index","findIndex","clearInterval","fetchDataHandler","axios","get","then","response","statusText","Error","randomForCategory","Math","floor","random","Object","keys","data","randomCategory","questionsInCategory","entries","randomForQuestion","randomQuestion","hintForThisQuestion","toConsumableArray","phrase","push","filter","prevProps","prevState","_this2","this","allLettersAreShowed","noMistakesLeft","clearTimeout","TimeoutID","filteredLetters","autoClicked","setTimeout","_this3","document","addEventListener","removeEventListener","_this$state2","components_Layout_Layout","components_StartPage_StartPage","components_InGamePage_InGamePage","components_EndGamePage_EndGamePage","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.870a283e.chunk.js","sourcesContent":["export const theme = {\r\n\r\n    colors: {\r\n        white: '#fff',\r\n        black: '#000',\r\n        gray: '#D6D6D8',\r\n        deep: '#140A25',\r\n        green: '#69a982',\r\n        red: '#6f2232',\r\n        deepRed: '#400D2A'\r\n    }\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types'\r\nimport { createGlobalStyle, ThemeProvider } from 'styled-components'\r\nimport { theme } from '../../theme/theme';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n\r\n*{\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-weight: normal;\r\n \r\n}\r\n* ::after, * ::before{\r\n    position: absolute;\r\n    content: '';\r\n}\r\n\r\n\r\n:root{\r\n    color:${({ theme }) => theme.colors.black};\r\n    font-size: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n}\r\n`\r\nconst LayoutWrapper = styled.div`\r\nposition: absolute;\r\ntop: 50%;\r\nleft: 50%;\r\nheight: 100%;\r\nwidth: 100%;\r\noverflow: hidden;\r\nmax-width: 1000px;\r\ntransform: translate(-50%,-50%);\r\n`\r\n\r\nconst Layout = ({ isGameInProgress, children }) =>\r\n    (\r\n        <ThemeProvider theme={theme}>\r\n            <>\r\n                <GlobalStyle\r\n                    isGameInProgress={isGameInProgress} />\r\n                <LayoutWrapper>\r\n                    {children}\r\n                </LayoutWrapper>\r\n            </>\r\n        </ThemeProvider>\r\n\r\n    )\r\n\r\n\r\nLayout.propTypes = {\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default Layout;","import styled from 'styled-components';\r\nimport React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//HangmanDrawingParts\r\nconst StylesForAllParts = styled.div`\r\n    position: absolute;\r\n    transition: .4s;\r\n    background-color: ${({ theme }) => theme.colors.white};\r\n    &::after,&::before{\r\n        background-color: ${({ theme }) => theme.colors.white};\r\n    }\r\n`\r\nconst GallowsBasis = styled(StylesForAllParts)`\r\n    top: 95%;\r\n    height: .3em;\r\n    left: 5%;\r\n    width: 70%;\r\n`\r\nconst GallowBranch = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    bottom: 5%;\r\n    left: 5%;\r\n    width: .4em;\r\n    &::after{\r\n        top: 0%;\r\n        height: 4em;\r\n        left: 300%;\r\n        width: 100%;\r\n        transform: rotate(35deg);\r\n    }\r\n    `\r\nconst GallowTopBranch = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    height: .4em;\r\n    left: 5%;\r\n    right: 50%;\r\n`\r\nconst GallowsNoose = styled(StylesForAllParts)`\r\n    top: 5%;\r\n    bottom: 82.5%;\r\n    left: 50%;\r\n    width: .4em;\r\n    transform: translateX(-50%);\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 6 ? '1' : '0'};\r\n\r\n`\r\n\r\nconst Head = styled(StylesForAllParts)`\r\n    top:17.5%;\r\n    height: 3.5em;\r\n    left: 50%;\r\n    width: 3.5em;\r\n    transform: translate(-50%);\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 5 ? '1' : '0'};\r\n\r\n    border: .1em solid white;\r\n    border-radius: 50%;\r\n    background-color: transparent;\r\n    ::after,::before{\r\n        top: 20%;\r\n        height: 10%;\r\n        width: 10%;\r\n        border-radius: 50%;\r\n    }\r\n    ::after{\r\n        left: 25%;\r\n    \r\n    }\r\n    ::before{\r\n        right: 25%;\r\n    }\r\n`\r\nconst Body = styled(StylesForAllParts)`\r\n    top: calc(3.5em + 17.5%);\r\n    height: 5em;\r\n    left: 50%;\r\n    width: .3em;\r\n    transform: translateX(-50%);\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 4 ? '1' : '0'};\r\n`\r\nconst StylesForArms = styled(StylesForAllParts)`\r\ntop: calc(3.5em + 17.5%);\r\n   height: .2em;\r\n   width: 3em;\r\n   border-radius: 30%;\r\n`\r\n\r\nconst LeftArm = styled(StylesForArms)`\r\n    left: 50%;\r\n    transform: translateX(-100%) rotate(-30deg);\r\n    transform-origin: top right;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 3 ? '1' : '0'};\r\n`\r\nconst RightArm = styled(StylesForArms)`\r\n    right: 50%;\r\n    transform: translateX(100%) rotate(30deg);\r\n    transform-origin: top left;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 2 ? '1' : '0'};\r\n`\r\nconst StylesForLegs = styled(StylesForAllParts)`\r\n    top: calc(3.5em + 17.5% + 4.8em);\r\n    width: 4em;\r\n    height: .2em;\r\n    border-radius: 30%;\r\n\r\n`\r\nconst LeftLeg = styled(StylesForLegs)`\r\n    left: 50%;\r\n    transform: translateX(-100%) rotate(-50deg);\r\n    transform-origin: top right;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 1 ? '1' : '0'};\r\n`\r\nconst RightLeg = styled(StylesForLegs)`\r\n    right: 50%;\r\n    transform: translateX(100%) rotate(50deg);\r\n    transform-origin: top left;\r\n    opacity: ${({ mistakesLeft }) => mistakesLeft <= 0 ? '1' : '0'};\r\n`\r\n\r\nconst Hangman = ({ mistakesLeft }) => (\r\n    <>\r\n        <GallowsBasis />\r\n        <GallowBranch />\r\n        <GallowTopBranch />\r\n        <GallowsNoose\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <Head\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <Body\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <LeftArm\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <LeftLeg\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <RightArm\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <RightLeg\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n    </>\r\n);\r\n\r\nHangman.propTypes = {\r\n    mistakesLeft: PropTypes.number,\r\n}\r\n\r\nexport default Hangman;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ButtonStyle = styled.button`\r\nposition: absolute;\r\ntop: 60%;\r\nleft: 50%;\r\ntransform:translateX(-50%);\r\nheight: 50px;\r\nwidth: 150px;\r\nborder-radius: 50px;\r\nborder: none;\r\nfont-size: 1.1em;\r\nletter-spacing: 2px;\r\nbackground-color: ${({ theme, disabled }) => disabled ? theme.colors.black : theme.colors.deepRed};\r\ncolor: ${({ theme }) => theme.colors.gray};\r\ncursor: pointer;\r\ntransition: .6s linear all;\r\n`\r\n\r\n\r\nconst StartGameButton = ({ startGame, phraseToGuess }) => {\r\n\r\n    const text = phraseToGuess.length > 0 ? 'Start Game' : 'Loading...'\r\n\r\n    return (\r\n        <ButtonStyle\r\n            disabled={phraseToGuess.length > 0 ? false : true}\r\n            onClick={startGame}>\r\n            {text}\r\n        </ButtonStyle>\r\n    )\r\n}\r\n\r\n\r\nStartGameButton.propTypes = {\r\n    startGame: PropTypes.func.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\r\n}\r\n\r\nexport default StartGameButton;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { ButtonStyle } from './StartGameButton';\r\n\r\nconst ButtonInfoStyle = styled(ButtonStyle)`\r\ntop: 75%;\r\n/* background-color: #8F1D2C; */\r\n`\r\n\r\n\r\n\r\nconst GameInfoButton = () => (\r\n    <ButtonInfoStyle>\r\n        Game Info\r\n\r\n    </ButtonInfoStyle>\r\n);\r\n\r\nexport default GameInfoButton;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Hangman from '../InGamePage/DrawingAndInfoSection/HangmanDrawing/Hangman/Hangman';\r\nimport StartGameButton from './Buttons/StartGameButton';\r\nimport GameInfoButton from './Buttons/GameInfoButton';\r\n\r\nconst StartPageWrapper = styled.div`\r\nheight: 100%;\r\nwidth: 100%;\r\nopacity: ${({ isGameInProgress, isGameEnded }) => isGameInProgress || isGameEnded ? '0' : '1'};\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\ntransition: .4s linear all;\r\n*{\r\n    opacity:1;\r\n}\r\nfont-size: 15px;\r\n`\r\n\r\nconst HangmanWapper = styled.div`\r\nheight: 100%;\r\nwidth: 100%;\r\nbackground-color: ${({ theme }) => theme.colors.deep};\r\n\r\n`\r\n\r\n\r\nconst StartPage = ({ isGameInProgress, startGame, isGameEnded, phraseToGuess, children }) => {\r\n    return (\r\n        <StartPageWrapper\r\n            isGameEnded={isGameEnded}\r\n            isGameInProgress={isGameInProgress}>\r\n            <HangmanWapper>\r\n                <Hangman />\r\n            </HangmanWapper>\r\n            <StartGameButton\r\n                phraseToGuess={phraseToGuess}\r\n                startGame={startGame}\r\n            >{children}\r\n            </StartGameButton>\r\n            <GameInfoButton>\r\n                {children}\r\n            </GameInfoButton>\r\n        </StartPageWrapper>\r\n    )\r\n}\r\n\r\nStartPage.propTypes = {\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n    startGame: PropTypes.func.isRequired,\r\n    isGameEnded: PropTypes.bool.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n}\r\n\r\n\r\nexport default StartPage;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Hangman from './Hangman/Hangman';\r\n\r\nconst HangmanSectionWrapper = styled.div`\r\n    flex-grow: 1;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n`\r\n\r\n\r\nconst HangmanDrawingSection = ({ mistakesLeft }) => (\r\n    <HangmanSectionWrapper>\r\n        <Hangman\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n\r\n    </HangmanSectionWrapper>\r\n);\r\n\r\nHangmanDrawingSection.propTypes = {\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n}\r\n\r\nexport default HangmanDrawingSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst GameInfoWrapper = styled.div`\r\n    flex-basis: 50%;\r\n    background-color: ${({ theme }) => theme.colors.deepRed};\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    justify-content: flex-end;\r\n    text-align: center;\r\n    font-size: 1.4rem;\r\n    color: ${({ theme }) => theme.colors.gray};\r\nspan{\r\n    display: block;\r\n}\r\n\r\n`\r\nconst Info = styled.div`\r\n    flex-basis: 90.5%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: space-around;\r\n    align-items: flex-end;\r\n`\r\n\r\nconst Category = styled.p`\r\n    flex-basis: 100%;\r\n    height: 25%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-around;\r\n    font-weight: 700;\r\n`\r\nconst Hint = styled.p`\r\n    flex-basis: 100%;\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    justify-content: space-around;\r\n    height: 40%;\r\n    font-weight: 700;\r\n`\r\n\r\nconst MistakesLeft = styled.div`\r\n    flex-basis: 40%;\r\n    height: 20%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-size: 2rem;\r\n    margin-bottom: .1rem;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n    border-radius: 100px;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    position: relative;\r\n    &::before{\r\n        top: 50%;\r\n        transform: translate(-90%, -50%);\r\n        left: 0;\r\n        width: 5rem;\r\n        height: 1rem;\r\n        border-radius: 20%;\r\n        background-color: ${({ theme }) => theme.colors.deep};\r\n    }\r\n`\r\n\r\n\r\nconst TimeToNextLetterWrapper = styled.div`\r\n    flex-basis: 40%;\r\n    height: 20%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    margin-bottom: .1rem;\r\n    font-size: 2rem;\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n    border-radius: 100px;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    position: relative;\r\n    &::before{\r\n        top: 100%;\r\n        transform: translate(-50%, -10%);\r\n        left: 50%;\r\n        width: 1rem;\r\n        height: 3rem;\r\n        border-radius: 20%;\r\n        background-color:${({ theme }) => theme.colors.black};\r\n    }\r\n`\r\n\r\nconst GameInfoSection = ({ timeToNextLetter, mistakesLeft, questionInfo }) => {\r\n    return (\r\n        <GameInfoWrapper>\r\n            <Info>\r\n                <Category>Category <span>{questionInfo.category}</span> </Category>\r\n                <Hint>Hint <span>{questionInfo.hint}</span></Hint>\r\n                <MistakesLeft>{mistakesLeft}</MistakesLeft>\r\n                <TimeToNextLetterWrapper>{timeToNextLetter} </TimeToNextLetterWrapper>\r\n            </Info>\r\n        </GameInfoWrapper>\r\n    )\r\n};\r\n\r\nGameInfoSection.propTypes = {\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    questionInfo: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\n\r\n\r\nexport default GameInfoSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport HangmanDrawing from './HangmanDrawing/HangmanDrawing';\r\nimport GameInfo from './GameInfo/GameInfo';\r\n\r\n\r\n\r\nconst DrawingAndInfoSectionWrapper = styled.div`\r\n    flex-basis: 35%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: row nowrap;\r\n    position: relative;\r\n    top: 0;\r\n    left: 0;\r\n    &::after{\r\n        top: -10%;\r\n        left: 35%;\r\n        right: 47%;\r\n        height: 110%;\r\n        transform: rotate(5deg);\r\n        background-color:${({ theme }) => theme.colors.deep};\r\n    }\r\n`\r\nconst DrawingAndInfoSection = ({ timeToNextLetter, mistakesLeft, questionInfo }) => (\r\n\r\n    <DrawingAndInfoSectionWrapper>\r\n        <HangmanDrawing\r\n            mistakesLeft={mistakesLeft}\r\n        />\r\n        <GameInfo\r\n            questionInfo={questionInfo}\r\n            mistakesLeft={mistakesLeft}\r\n            timeToNextLetter={timeToNextLetter}\r\n        />\r\n    </DrawingAndInfoSectionWrapper>\r\n);\r\n\r\n\r\nDrawingAndInfoSection.propTypes = {\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    questionInfo: PropTypes.object.isRequired,\r\n}\r\nexport default DrawingAndInfoSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst LetterWrapper = styled.span`\r\n    display: block;\r\n    height: 1.5rem;\r\n    width: 1.5rem;\r\n    font-size: 2rem;\r\n    margin-left: 1.4rem;\r\n    color: ${({ theme }) => theme.colors.gray};\r\n`\r\n\r\nconst Letter = ({ letterObj }) => (\r\n    <LetterWrapper>\r\n        {letterObj.isLetterShowed ? letterObj.letter : \"__\"}\r\n    </LetterWrapper>\r\n);\r\n\r\nLetter.propTypes = {\r\n    letterObj: PropTypes.object.isRequired,\r\n}\r\n\r\n\r\nexport default Letter;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Letter from './Letter/Letter';\r\n\r\nconst LettersWrapper = styled.div`\r\n\r\n    flex-basis: 90%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    align-items: center;\r\n    justify-content: center;\r\n    align-content: space-around;\r\n    text-align: center;\r\n\r\n`\r\n\r\nconst BreakLine = styled.div`\r\n    flex-basis: 100%;\r\n    height: 1%;\r\n`\r\n\r\n\r\n\r\nconst Letters = ({ phraseToGuess }) => {\r\n\r\n    const letters = phraseToGuess.map(letterObj => {\r\n        let letters;\r\n        if (letterObj.letter !== \" \") {\r\n            letters = <Letter\r\n                key={letterObj.id}\r\n                letterObj={letterObj} />\r\n        }\r\n        else if (letterObj.letter === \" \") {\r\n            letters = <BreakLine\r\n                key={letterObj.id} />\r\n        }\r\n        return letters;\r\n    })\r\n\r\n    return (\r\n\r\n        <LettersWrapper>{letters}</LettersWrapper>\r\n    );\r\n};\r\n\r\nLetters.propTypes = {\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n}\r\n\r\nexport default Letters;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport Letters from './Letters/Letters';\r\n\r\nconst PhraseToGuessWrapper = styled.div`\r\n    flex-basis: 25%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    justify-content: space-around;\r\n    background-color: ${({ theme }) => theme.colors.black};\r\n`\r\n\r\nconst PhraseToGuess = ({ phraseToGuess }) => (\r\n\r\n    <PhraseToGuessWrapper>\r\n\r\n        <Letters phraseToGuess={phraseToGuess} />\r\n\r\n    </PhraseToGuessWrapper>\r\n\r\n);\r\n\r\nPhraseToGuess.propTypes = {\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n\r\n}\r\n\r\nexport default PhraseToGuess;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Letter = styled.span`\r\n    flex-basis: 10%;\r\n    height: 15%;\r\n    margin: .5rem;\r\n    font-size: 1.5rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    border-radius: 5px;\r\n    font-weight: 700;\r\n    transform: ${({ isClicked }) => isClicked && 'translateY(.3rem)'};  \r\n    box-shadow:${({ isClicked, isHit, theme }) =>\r\n        isHit ? `0 .5rem 0 0 ${theme.colors.green}`\r\n            : isClicked ? `0 .5rem  0 0 ${theme.colors.red}`\r\n                : `0 0 .1rem 0 ${theme.colors.gray}`};\r\n    background-color: ${({ isClicked, theme }) => isClicked ? theme.colors.deep : theme.colors.black};\r\n    opacity: ${({ isClicked }) => isClicked ? '.5' : '1'};\r\n    color: ${({ theme }) => theme.colors.gray};\r\n    cursor: pointer;\r\n`\r\n\r\nconst LetterToClick = ({ letter, clickLetter, isHit, isClicked }) => (\r\n    <Letter\r\n        isClicked={isClicked}\r\n        onClick={clickLetter}\r\n        isHit={isHit}\r\n    >\r\n        {letter}\r\n    </Letter>\r\n);\r\n\r\nLetterToClick.propTypes = {\r\n    letter: PropTypes.string.isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n    isHit: PropTypes.bool.isRequired,\r\n    isClicked: PropTypes.bool.isRequired,\r\n}\r\n\r\nexport default LetterToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport LetterToClick from './LetterToClick/LetterToClick';\r\n\r\nconst LettersWrapper = styled.div`\r\n    flex-basis: 40%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: ${({ theme }) => theme.colors.deep};\r\n`\r\n\r\nconst LettersToClick = ({ lettersToClick, clickLetter }) => {\r\n\r\n    const letters = lettersToClick.map(letterToClick => (\r\n        <LetterToClick\r\n            clickLetter={(e, key) => clickLetter(e, key)}\r\n            isClicked={letterToClick.isClicked}\r\n            key={letterToClick.letter}\r\n            isHit={letterToClick.isHit}\r\n            letter={letterToClick.letter.toUpperCase()} />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n};\r\n\r\n\r\nLettersToClick.propTypes = {\r\n    lettersToClick: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n}\r\nexport default LettersToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport PropTypes from 'prop-types';\r\nimport DrawingAndInfoSection from './DrawingAndInfoSection/DrawingAndInfoSection';\r\nimport PhraseToGuessSection from './PhraseToGuessSection/PhraseToGuessSection';\r\nimport LettersToClickSection from './LettersToClickSection/LettersToClickSection';\r\n\r\n\r\nconst InGamePageWrapper = styled.div`\r\n    position: absolute;\r\n    top: 0;\r\n    left: 0;\r\n    height: 100%;\r\n    width: 100%;\r\n    display: flex;\r\n    flex-flow: column wrap;\r\n    justify-content: space-evenly;\r\n    align-items: center;\r\n    transform: ${({ isGameInProgress, isGameEnded }) => isGameInProgress ? 'translateX(0)' : isGameEnded ? 'translateX(-100%)' : 'translateX(100%)'};\r\n    transition: ${({ isGameEnded }) => isGameEnded ? '.4s .4s linear all' : '.4s linear all'};\r\n`\r\n\r\n\r\n\r\n\r\nconst InGamePage = ({ mistakesLeft, timeToNextLetter, phraseToGuess, questionInfo, lettersToClick, clickLetter, isGameInProgress, isGameEnded }) => (\r\n    <InGamePageWrapper\r\n        isGameEnded={isGameEnded}\r\n        isGameInProgress={isGameInProgress}>\r\n        <DrawingAndInfoSection\r\n            questionInfo={questionInfo}\r\n            mistakesLeft={mistakesLeft}\r\n            timeToNextLetter={timeToNextLetter}\r\n        />\r\n        <PhraseToGuessSection\r\n            phraseToGuess={phraseToGuess}\r\n        />\r\n        <LettersToClickSection\r\n            lettersToClick={lettersToClick}\r\n            clickLetter={clickLetter} />\r\n    </InGamePageWrapper>\r\n);\r\n\r\nInGamePage.propTypes = {\r\n    mistakesLeft: PropTypes.number.isRequired,\r\n    timeToNextLetter: PropTypes.number.isRequired,\r\n    phraseToGuess: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    questionInfo: PropTypes.object.isRequired,\r\n    lettersToClick: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    clickLetter: PropTypes.func.isRequired,\r\n    isGameInProgress: PropTypes.bool.isRequired,\r\n    isGameEnded: PropTypes.bool.isRequired,\r\n}\r\n\r\n\r\nexport default InGamePage;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst EndGameWrapper = styled.div`\r\nposition: absolute;\r\ntop: 0;\r\nleft: 0;\r\nheight: 100%;\r\nwidth: 100%;\r\nbackground-color: #333;\r\ntransform: ${({ isGameEnded, isGameInProgress }) => isGameInProgress ? 'translateX(100%)' : isGameEnded ? 'translateX(0)' : 'translateX(200%)'};\r\ntransition: .2s .4s linear all;\r\n`\r\n\r\nconst EndGamePage = ({ isGameEnded, isGameInProgress }) => (\r\n    <EndGameWrapper\r\n        isGameInProgress={isGameInProgress}\r\n        isGameEnded={isGameEnded}>\r\n    </EndGameWrapper>\r\n);\r\n\r\nexport default EndGamePage;","import React, { Component } from 'react';\nimport Layout from '../components/Layout/Layout';\nimport StartPage from '../components/StartPage/StartPage';\nimport InGamePage from '../components/InGamePage/InGamePage';\nimport EndGamePage from '../components/EndGamePage/EndGamePage';\nimport axios from 'axios'\nconst TIME_TO_NEXT_LETTER = 7;\n\nconst API = 'https://hangman-239ba.firebaseio.com/.json'\n\nclass App extends Component {\n\n  state = {\n    phraseToGuess: [],          //phrase comes from API in componentDidMount\n    lettersToClick: [           //letters in layout, possible to click or press (keyboard)\n      { letter: 'a', isClicked: false, isHit: false },\n      { letter: 'b', isClicked: false, isHit: false },\n      { letter: 'c', isClicked: false, isHit: false },\n      { letter: 'd', isClicked: false, isHit: false },\n      { letter: 'e', isClicked: false, isHit: false },\n      { letter: 'f', isClicked: false, isHit: false },\n      { letter: 'g', isClicked: false, isHit: false },\n      { letter: 'h', isClicked: false, isHit: false },\n      { letter: 'i', isClicked: false, isHit: false },\n      { letter: 'j', isClicked: false, isHit: false },\n      { letter: 'k', isClicked: false, isHit: false },\n      { letter: 'l', isClicked: false, isHit: false },\n      { letter: 'm', isClicked: false, isHit: false },\n      { letter: 'n', isClicked: false, isHit: false },\n      { letter: 'o', isClicked: false, isHit: false },\n      { letter: 'p', isClicked: false, isHit: false },\n      { letter: 'q', isClicked: false, isHit: false },\n      { letter: 'r', isClicked: false, isHit: false },\n      { letter: 's', isClicked: false, isHit: false },\n      { letter: 't', isClicked: false, isHit: false },\n      { letter: 'u', isClicked: false, isHit: false },\n      { letter: 'v', isClicked: false, isHit: false },\n      { letter: 'w', isClicked: false, isHit: false },\n      { letter: 'y', isClicked: false, isHit: false },\n      { letter: 'x', isClicked: false, isHit: false },\n      { letter: 'z', isClicked: false, isHit: false },\n    ],\n    questionInfo: {},\n    timeToNextLetter: 7,        //if time === 0 => random letter is clicked \n    mistakesLeft: 7,            // if we select wrong letter => mistakes--. If mistakes ===0 => game is over\n    isGameInProgress: false,\n    isGameEnded: false,\n  }\n\n  startGameHandler = () => {\n    this.setState({ isGameInProgress: true });\n  }\n\n  startTimeToNextLetterHandler = () => {\n    if (this.state.isGameEnded) return;\n    this.ID = setInterval(() => {\n      this.setState({ timeToNextLetter: this.state.timeToNextLetter - 1 })\n    }, 1000);\n  }\n\n  isSelectedLetterInPhraseHandler = (selectedLetterObj) => {\n    const { phraseToGuess } = this.state\n    const letterInPhrase = phraseToGuess.find(letterObj => letterObj.letter === selectedLetterObj.letter.toUpperCase())\n    const selectedLetter = selectedLetterObj.letter.toUpperCase()\n    selectedLetterObj.isClicked = true;\n    if (letterInPhrase) {\n      selectedLetterObj.isHit = true;\n      phraseToGuess.forEach(letterObj => {\n        if (letterObj.letter === selectedLetter) {\n          letterObj.isLetterShowed = true;\n        }\n      })\n    }\n    else {\n      this.setState({ mistakesLeft: this.state.mistakesLeft - 1 })\n    }\n  }\n\n  clickOrPressKeyLetterHandler = (e, key) => {\n    if (!this.state.isGameInProgress) return;\n    //Do only if game is not ended\n    if (this.state.isGameEnded || this.state.timeToNextLetter === 0) return;\n\n    const { lettersToClick, phraseToGuess, } = this.state\n    const clickedLetter = e.target.textContent\n    let pressedOrClickedLetter;\n\n    if (key) {\n      pressedOrClickedLetter = key.toUpperCase()\n    }\n    else if (clickedLetter) {\n      pressedOrClickedLetter = e.target.textContent;\n    }\n\n    const index = lettersToClick.findIndex(letter => letter.letter.toUpperCase() === pressedOrClickedLetter);\n\n    if (index === -1 || lettersToClick[index].isClicked) return\n\n    const selectedLetterObj = lettersToClick[index]\n    this.isSelectedLetterInPhraseHandler(selectedLetterObj)\n    clearInterval(this.ID)\n    this.startTimeToNextLetterHandler();\n    this.setState({ phraseToGuess, lettersToClick, timeToNextLetter: TIME_TO_NEXT_LETTER });\n  }\n\n  fetchDataHandler = () => {\n\n    axios.get(API)\n      .then(response => response.statusText ? response : Error)\n      .then(response => {\n        const randomForCategory = Math.floor(Math.random() * Object.keys(response.data).length)\n        const randomCategory = Object.keys(response.data)[randomForCategory];\n        const questionsInCategory = Object.entries(response.data)[randomForCategory][1]\n        const randomForQuestion = Math.floor(Math.random() * Object.entries(questionsInCategory).length)\n        const randomQuestion = Object.entries(questionsInCategory)[randomForQuestion][0];\n        const hintForThisQuestion = Object.entries(questionsInCategory)[randomForQuestion][1];\n\n        const { phraseToGuess } = this.state;\n\n\n        [...randomQuestion].map((phrase, index) => {\n          return phraseToGuess.push({\n            letter: phrase.toUpperCase(),\n            id: index,\n            isLetterShowed: false,\n          })\n        })\n        phraseToGuess.filter(letterObj => (\n          letterObj.letter === \" \" || letterObj.letter === \",\" || letterObj.letter === \"-\" ? letterObj.isLetterShowed = true : letterObj.isLetterShowed = false)\n        )\n        this.setState({\n          phraseToGuess, questionInfo: {\n            category: randomCategory,\n            hint: hintForThisQuestion,\n          }\n        })\n      }\n      )\n  }\n\n\n  //autoclick letter\n  componentDidUpdate(prevProps, prevState) {\n    //END GAME HANDLER\n    if (this.state.isGameEnded) return;\n\n    const allLettersAreShowed = this.state.phraseToGuess.filter(phrase => !phrase.isLetterShowed).length === 0;\n    const noMistakesLeft = this.state.mistakesLeft === 0 && true;\n    if (allLettersAreShowed || noMistakesLeft) {\n      clearInterval(this.ID)\n      clearTimeout(this.TimeoutID)\n      this.setState({ isGameEnded: true, isGameInProgress: false })\n\n    }\n\n    if (prevState.timeToNextLetter !== this.state.timeToNextLetter) {\n\n      const { phraseToGuess } = this.state\n      const lettersToClick = prevState.lettersToClick;\n\n      if (phraseToGuess.filter(phrase => !phrase.isLetterShowed).length === 0) return; // if the phrase is guessed\n      if (lettersToClick.filter(letterObj => !letterObj.isClicked).length === 0) return; // if all letters are clicked\n\n      const filteredLetters = lettersToClick.filter(letterToClick => !letterToClick.isClicked);\n      const random = Math.floor(Math.random() * filteredLetters.length);\n      //this is random clicked letter\n      const autoClicked = filteredLetters[random];\n      if (this.state.timeToNextLetter === 0) {\n        this.isSelectedLetterInPhraseHandler(autoClicked);\n        this.setState({ phraseToGuess, lettersToClick });\n        clearInterval(this.ID);\n        this.TimeoutID = setTimeout(() => {\n          this.setState({ timeToNextLetter: TIME_TO_NEXT_LETTER })\n          this.startTimeToNextLetterHandler();\n        }, 1000)\n      }\n\n    }\n\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', (e) => this.clickOrPressKeyLetterHandler(e, e.key));\n    this.fetchDataHandler();\n  }\n\n\n\n  componentWillUnmount() {\n\n    document.removeEventListener('keydown', this.clickOrPressKeyLetterHandler())\n  }\n\n  render() {\n    const {\n      phraseToGuess,\n      lettersToClick,\n      timeToNextLetter,\n      mistakesLeft,\n      isGameInProgress,\n      isGameEnded,\n      questionInfo,\n    } = this.state\n\n    return (\n\n      <Layout\n        isGameInProgress={isGameInProgress}>\n        <StartPage\n          phraseToGuess={phraseToGuess}\n          isGameEnded={isGameEnded}\n          isGameInProgress={isGameInProgress}\n          startGame={this.startGameHandler} />\n        <InGamePage\n          isGameEnded={isGameEnded}\n          isGameInProgress={isGameInProgress}\n          questionInfo={questionInfo}\n          phraseToGuess={phraseToGuess}\n          lettersToClick={lettersToClick}\n          timeToNextLetter={timeToNextLetter}\n          mistakesLeft={mistakesLeft}\n          clickLetter={this.clickOrPressKeyLetterHandler}\n        />\n        <EndGamePage\n          isGameInProgress={isGameInProgress}\n          isGameEnded={isGameEnded} />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}