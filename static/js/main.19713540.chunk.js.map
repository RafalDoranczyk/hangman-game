{"version":3,"sources":["components/PhraseToGuessSection/Letters/Letter/Letter.js","components/PhraseToGuessSection/Letters/Letters.js","components/PhraseToGuessSection/PhraseToGuessSection.js","components/LettersToClickSection/LetterToClick/LetterToClick.js","components/LettersToClickSection/LettersToClickSection.js","components/Layout/Layout.js","components/DrawingAndInfoSection/HangmanDrawing/HangmanParts/Head.js","components/DrawingAndInfoSection/HangmanDrawing/HangmanParts/Body.js","components/DrawingAndInfoSection/HangmanDrawing/HangmanParts/LeftArm.js","components/DrawingAndInfoSection/HangmanDrawing/HangmanParts/RightArm.js","components/DrawingAndInfoSection/HangmanDrawing/HangmanParts/LeftLeg.js","components/DrawingAndInfoSection/HangmanDrawing/HangmanDrawing.js","components/DrawingAndInfoSection/GameInfo/GameInfo.js","components/DrawingAndInfoSection/DrawingAndInfoSection.js","containers/App.js","serviceWorker.js","index.js"],"names":["LetterWrapper","styled","span","_templateObject","letter","_ref","react_default","a","createElement","isShowed","name","LettersWrapper","div","Letters_templateObject","BreakLine","_templateObject2","letters","_templateObject3","phraseToGuess","map","Letter","key","id","PhraseToGuessWrapper","PhraseToGuessSection_templateObject","PhraseToGuess","timeToNextLetter","Letters","LetterToClick_templateObject","isClicked","_ref2","isHit","_ref3","_ref4","_ref5","letterToClick","_ref6","clickLetter","LetterToClick_Letter","onClick","LettersToClickSection_templateObject","LettersToClick","lettersToClick","LetterToClick","e","toUpperCase","LettersToClickSection_LettersWrapper","GlobalStyle","createGlobalStyle","Layout_templateObject","Layout","Layout_templateObject2","layout","props","Fragment","children","Head","Head_templateObject","Body","Body_templateObject","LeftArm","LeftArm_templateObject","RightArm","RightArm_templateObject","LeftLeg","LeftLeg_templateObject","HangmanDrawingWrapper","HangmanDrawing_templateObject","hangmanDrawingSection","GameInfoWrapper","GameInfo_templateObject","GameInfoSection","DrawingAndInfoSectionWrapper","DrawingAndInfoSection_templateObject","DrawingAndInfoSection","HangmanDrawing","GameInfo","App","state","mistakes","time","pressLetterHandler","playerLetter","_this","index","findIndex","phrase","setState","clickLetterHandler","_this$state","target","textContent","_this2","this","document","addEventListener","axios","get","then","response","statusText","Error","Object","toConsumableArray","push","filter","_this$state2","Layout_Layout","components_DrawingAndInfoSection_DrawingAndInfoSection","PhraseToGuessSection","LettersToClickSection","Component","Boolean","window","location","hostname","match","ReactDOM","render","containers_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qYAIA,IAAMA,EAAgBC,IAAOC,KAAVC,KAoBJC,EAXA,SAAAC,GAAgB,IAAbD,EAAaC,EAAbD,OAEd,OACIE,EAAAC,EAAAC,cAACR,EAAD,KAEKI,EAAOK,SAAWL,EAAOM,KAAO,qbCd7C,IAAMC,EAAiBV,IAAOW,IAAVC,KASdC,EAAYb,IAAOW,IAAVG,KAmCAC,GA/BDf,IAAOW,IAAVK,KAMK,SAAAZ,GAAuB,IAG7BW,EAH6BX,EAApBa,cAGeC,IAAI,SAAAf,GAC9B,MAAoB,MAAhBA,EAAOM,KAEHJ,EAAAC,EAAAC,cAACY,EAAD,CACIC,IAAKjB,EAAOkB,GACZlB,OAAQA,IAEK,MAAhBA,EAAOM,KAAqBJ,EAAAC,EAAAC,cAACM,EAAD,WAAhC,IAOT,OACIR,EAAAC,EAAAC,cAACG,EAAD,KACKK,qPCtCb,IAAMO,EAAuBtB,IAAOW,IAAVY,KAwBXC,EAbO,SAAApB,GAAyC,IAAtCa,EAAsCb,EAAtCa,cAAsCb,EAAvBqB,iBAEpC,OACIpB,EAAAC,EAAAC,cAACe,EAAD,KACIjB,EAAAC,EAAAC,cAACmB,EAAD,CAEIT,cAAeA,kcClB/B,IAAME,EAASnB,IAAOC,KAAV0B,IAUC,SAAAvB,GAAA,OAAAA,EAAGwB,WAA6B,qBAChC,SAAAC,GAAA,IAAGD,EAAHC,EAAGD,UAAH,OAAAC,EAAcC,MAAoB,sBAAwBF,EAAY,uBAAyB,uBACnG,SAAAG,GAAA,OAAAA,EAAGH,UAA4B,UAAY,WAChC,SAAAI,GAAA,OAAAA,EAAGJ,UAA4B,UAAY,QACpD,SAAAK,GAAA,OAAAA,EAAGL,UAA4B,KAAO,MAmBlCM,EAbO,SAAAC,GAA+C,IAA5ChC,EAA4CgC,EAA5ChC,OAAQiC,EAAoCD,EAApCC,YAAaN,EAAuBK,EAAvBL,MAAOF,EAAgBO,EAAhBP,UAEjD,OACIvB,EAAAC,EAAAC,cAAC8B,EAAD,CACIT,UAAWA,EACXU,QAASF,EACTN,MAAOA,GAEN3B,6NC3Bb,IAAMO,EAAiBV,IAAOW,IAAV4B,KA4BLC,EAlBQ,SAAApC,GAAqC,IAAlCqC,EAAkCrC,EAAlCqC,eAAgBL,EAAkBhC,EAAlBgC,YAEhCrB,EAAU0B,EAAevB,IAAI,SAAAgB,GAAa,OAC5C7B,EAAAC,EAAAC,cAACmC,EAAD,CACIN,YAAa,SAACO,GAAQP,EAAYO,IAClCf,UAAWM,EAAcN,UACzBR,IAAKc,EAAc/B,OACnB2B,MAAOI,EAAcJ,MACrB3B,OAAQ+B,EAAc/B,OAAOyC,kBAGrC,OACIvC,EAAAC,EAAAC,cAACsC,EAAD,KACK9B,ydCvBb,IAAM+B,EAAcC,YAAHC,KAeXC,EAASjD,IAAOW,IAAVuC,KAkBGC,EARA,SAACC,GAAD,OAEP/C,EAAAC,EAAAC,cAAAF,EAAAC,EAAA+C,SAAA,KACIhD,EAAAC,EAAAC,cAACuC,EAAD,MACAzC,EAAAC,EAAAC,cAAC0C,EAAD,KAASG,EAAME,qkBC/BpB,IAAMC,EAAOvD,IAAOW,IAAV6C,4NCAV,IAAMC,EAAOzD,IAAOW,IAAV+C,+PCAV,IAAMC,EAAU3D,IAAOW,IAAViD,8PCAb,IAAMC,EAAW7D,IAAOW,IAAVmD,yPCAd,IAAMC,EAAU/D,IAAOW,IAAVqD,iKCKpB,IAAMC,EAAwBjE,IAAOW,IAAVuD,KAqBZC,EAVe,kBAC1B9D,EAAAC,EAAAC,cAAC0D,EAAD,KACI5D,EAAAC,EAAAC,cAACgD,EAAD,MACAlD,EAAAC,EAAAC,cAACkD,EAAD,KACIpD,EAAAC,EAAAC,cAACoD,EAAD,MACAtD,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACwD,EAAD,iwBCrBZ,IAAMK,EAAkBpE,IAAOW,IAAV0D,KAuDNC,EAbS,SAAAlE,GAA0B,IAAvBqB,EAAuBrB,EAAvBqB,iBACvB,OACIpB,EAAAC,EAAAC,cAAC6D,EAAD,KACI/D,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,uBAAcF,EAAAC,EAAAC,cAAA,iCACdF,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,sDACVF,EAAAC,EAAAC,cAAA,qCAA4BF,EAAAC,EAAAC,cAAA,UAAKkB,EAAL,wNC9C5C,IAAM8C,GAA+BvE,IAAOW,IAAV6D,MAqBnBC,GAVe,SAAArE,GAAA,IAAGqB,EAAHrB,EAAGqB,iBAAH,OAC1BpB,EAAAC,EAAAC,cAACgE,GAAD,KAEIlE,EAAAC,EAAAC,cAACmE,EAAD,MACArE,EAAAC,EAAAC,cAACoE,EAAD,CACIlD,iBAAkBA,0BC4HfmD,8MAvIbC,MAAQ,CAEN5D,cAAe,GACfwB,eAAgB,CACd,CAAEtC,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,GACxC,CAAE3B,OAAQ,IAAKyB,WAAW,EAAOE,OAAO,IAE1CgD,SAAU,EACVC,KAAM,EACNtD,iBAAkB,KAOpBuD,mBAAqB,SAACC,GAAiB,IAC7BxC,EAAoByC,EAAKL,MAAzBpC,eACJxB,EAAgBiE,EAAKL,MACnBM,EAAQ1C,EAAe2C,UAAU,SAAAlD,GAAa,OAClDA,EAAc/B,OAAOyC,gBAAkBqC,KAE1B,IAAXE,GAAgB1C,EAAe0C,GAAOvD,YAC1Ca,EAAe0C,GAAOvD,WAAY,EAElCX,EAAgBA,EAAcC,IAAI,SAAAmE,GAC5BA,EAAO5E,OAASwE,IAClBI,EAAO7E,UAAW,EAClBiC,EAAe0C,GAAOrD,OAAQ,KAKlCoD,EAAKI,SAAS,CAAErE,gBAAewB,uBAIjC8C,mBAAqB,SAAC5C,GAAM,IAAA6C,EACiBN,EAAKL,MAAxCpC,EADkB+C,EAClB/C,eAAgBxB,EADEuE,EACFvE,cAClBwE,EAAS9C,EAAE8C,OAAOC,YAElBP,EAAQ1C,EAAe2C,UAAU,SAAAlD,GAAa,OAClDA,EAAc/B,OAAOyC,gBAAkB6C,EAAO7C,gBAEhDH,EAAe0C,GAAOvD,WAAY,EAClCX,EAAcC,IAAI,SAAAmE,GACZA,EAAO5E,OAASgF,IAClBJ,EAAO7E,UAAW,EAClBiC,EAAe0C,GAAOrD,OAAQ,KAMlCoD,EAAKI,SAAS,CAAErE,gBAAewB,yGAOX,IAAAkD,EAAAC,KACpBC,SAASC,iBAAiB,WAAY,SAACnD,GAAD,OAAOgD,EAAKX,mBAAmBrC,EAAEvB,IAAIwB,6DAI3EmD,KAAMC,IA9FE,+CA+FLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,WAAaD,EAAWE,QAClDH,KAAK,SAAAC,MAIR,IACQjF,EAAkB2E,KAAKf,MAAvB5D,cACRoF,OAAAC,EAAA,EAAAD,CAFsB,uBAEHnF,IAAI,SAACmE,EAAQF,GAC9B,OAAOlE,EAAcsF,KAAK,CACxB9F,KAAM4E,EAAOzC,cACbvB,GAAI8D,EACJ3E,UAAU,MAGdS,EAAcuF,OAAO,SAAAnB,GAAM,MACT,MAAhBA,EAAO5E,MAAgC,MAAhB4E,EAAO5E,MAAgC,MAAhB4E,EAAO5E,KAAe4E,EAAO7E,UAAW,EAAO6E,EAAO7E,UAAW,IAEjHoF,KAAKN,SAAS,CAAErE,mDAKT,IAAAwF,EAGqDb,KAAKf,MAAzD5D,EAHDwF,EAGCxF,cAAewB,EAHhBgE,EAGgBhE,eAAgBhB,EAHhCgF,EAGgChF,iBACvC,OACEpB,EAAAC,EAAAC,cAACmG,EAAD,KACErG,EAAAC,EAAAC,cAACoG,GAAD,CACElF,iBAAkBA,IAEpBpB,EAAAC,EAAAC,cAACqG,EAAD,CAEE3F,cAAeA,IAEjBZ,EAAAC,EAAAC,cAACsG,EAAD,CACEpE,eAAgBA,EAChBL,YAAawD,KAAKL,6BAlIVuB,aCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOhH,EAAAC,EAAAC,cAAE+G,GAAF,MAAUzB,SAAS0B,eAAe,SD4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzB,KAAK,SAAA0B,GACjCA,EAAaC","file":"static/js/main.19713540.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport styled from 'styled-components';\r\n\r\nconst LetterWrapper = styled.span`\r\ndisplay: block;\r\nheight: 1.5rem;\r\nwidth: 1.5rem;\r\nfont-size: 2rem;\r\nmargin-left: 1rem;\r\n`\r\n\r\n\r\nconst letter = ({ letter }) => {\r\n\r\n    return (\r\n        <LetterWrapper>\r\n\r\n            {letter.isShowed ? letter.name : \"_\"}\r\n        </LetterWrapper>\r\n    );\r\n}\r\n\r\n\r\nexport default letter;","import React from 'react';\r\nimport Letter from './Letter/Letter';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\nflex-basis: 90%;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\nalign-items: center;\r\njustify-content: center;\r\nalign-content: space-around;\r\ntext-align: center;\r\n`\r\nconst BreakLine = styled.div`\r\nflex-basis: 100%;\r\nheight: 1%;\r\n`\r\nconst Space = styled.div`\r\nflex-basis: 20%;\r\nheight: 1%;\r\n`\r\n\r\n\r\nconst letters = ({ phraseToGuess }) => {\r\n\r\n\r\n    const letters = phraseToGuess.map(letter => {\r\n        if (letter.name !== \" \")\r\n            return (\r\n                <Letter\r\n                    key={letter.id}\r\n                    letter={letter}\r\n                />)\r\n        else if (letter.name === \" \") return <BreakLine />\r\n\r\n\r\n\r\n    }\r\n    )\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default letters;","import React from 'react';\r\nimport Letters from './Letters/Letters';\r\nimport styled from 'styled-components';\r\n\r\nconst PhraseToGuessWrapper = styled.div`\r\nflex-basis: 25%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: column wrap;\r\njustify-content: space-around;\r\nalign-items: center;\r\nbackground-color: #000;\r\ncolor: #050311;\r\n`\r\n\r\nconst PhraseToGuess = ({ phraseToGuess, timeToNextLetter }) => {\r\n\r\n    return (\r\n        <PhraseToGuessWrapper>\r\n            <Letters\r\n\r\n                phraseToGuess={phraseToGuess}\r\n            />\r\n\r\n        </PhraseToGuessWrapper>\r\n    );\r\n}\r\n\r\nexport default PhraseToGuess;","import React from 'react';\r\nimport styled from 'styled-components'\r\n\r\nconst Letter = styled.span`\r\nflex-basis: 10%;\r\nheight: 15%;\r\nmargin: .5rem;\r\nfont-size: 1.5rem;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\nborder-radius: 5px;\r\nfont-weight: 400;\r\ntransform: ${({ isClicked }) => isClicked && 'translateY(.3rem)'};  \r\nbox-shadow:${({ isClicked, isHit }) => isHit ? '0 .5rem 0 0 #69a982' : isClicked ? '0 .5rem  0 0 #6f2232' : '0 0 .1rem 0 #D6D6D8'};\r\ncolor: ${({ isClicked }) => isClicked ? '#53516F' : '#D6D6D8'};\r\nbackground-color: ${({ isClicked }) => isClicked ? '#15142E' : '#000'};\r\nopacity: ${({ isClicked }) => isClicked ? '.5' : '1'};\r\ntransition-duration: .1s;\r\ntransition-property: color, background-color, opacity, box-shadow;\r\ncursor: pointer;\r\n`\r\n\r\nconst letterToClick = ({ letter, clickLetter, isHit, isClicked }) => {\r\n\r\n    return (\r\n        <Letter\r\n            isClicked={isClicked}\r\n            onClick={clickLetter}\r\n            isHit={isHit}\r\n        >\r\n            {letter}\r\n        </Letter>\r\n    )\r\n}\r\n\r\nexport default letterToClick;","import React from 'react';\r\nimport LetterToClick from './LetterToClick/LetterToClick';\r\nimport styled from 'styled-components';\r\n\r\nconst LettersWrapper = styled.div`\r\nflex-basis: 40%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: row wrap;\r\njustify-content: center;\r\nalign-items: center;\r\nbackground-color: #0B091F;\r\n`\r\n\r\nconst LettersToClick = ({ lettersToClick, clickLetter }) => {\r\n\r\n    const letters = lettersToClick.map(letterToClick => (\r\n        <LetterToClick\r\n            clickLetter={(e) => { clickLetter(e) }}\r\n            isClicked={letterToClick.isClicked}\r\n            key={letterToClick.letter}\r\n            isHit={letterToClick.isHit}\r\n            letter={letterToClick.letter.toUpperCase()} />\r\n    ))\r\n\r\n    return (\r\n        <LettersWrapper>\r\n            {letters}\r\n        </LettersWrapper>\r\n    );\r\n}\r\n\r\nexport default LettersToClick;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { createGlobalStyle } from 'styled-components'\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n*{\r\nmargin: 0;\r\npadding: 0;\r\nbox-sizing: border-box;\r\nfont-weight: normal;\r\ncolor:white;\r\n}\r\n:root{\r\n    font-size: 10px;\r\n    font-family: 'Montserrat', sans-serif;\r\n}\r\n\r\n`\r\n\r\nconst Layout = styled.div`\r\nbackground-color: #444;\r\nheight: 100vh;\r\noverflow: hidden;\r\ndisplay: flex;\r\nflex-flow: column wrap;\r\njustify-content: space-evenly;\r\nalign-items: center;\r\n`\r\n\r\nconst layout = (props) =>\r\n    (\r\n        <>\r\n            <GlobalStyle />\r\n            <Layout>{props.children}</Layout>\r\n        </>\r\n    )\r\n\r\nexport default layout;","import styled from 'styled-components';\r\n\r\nexport const Head = styled.div`\r\n    position: absolute;\r\n    top: 20%;\r\n    left: 50%;\r\n    height: 3rem;\r\n    width: 3rem;\r\n\r\n    transform: translateX(-50%);\r\n   \r\n    border-radius: 50%;\r\n    border: 1px solid white;\r\n\r\n    ::after,::before{\r\n        content: '';\r\n        position: absolute;\r\n        top: 20%;\r\n        width: 10%;\r\n        height: 10%;\r\n        border-radius: 50%;\r\n        background-color: #D6D6D8\r\n    }\r\n    ::after{\r\n        left: 25%;\r\n    \r\n    }\r\n    ::before{\r\n        right: 25%;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n`\r\n\r\n","import styled from 'styled-components';\r\n\r\nexport const Body = styled.div`\r\nheight: 30%;\r\nwidth: .3rem;\r\nbackground-color: #D6D6D8;\r\nposition: absolute;\r\ntop: calc(20% + 3rem);\r\nleft: 50%;\r\ntransform: translateX(-50%);\r\n`","import styled from 'styled-components';\r\n\r\nexport const LeftArm = styled.div`\r\nheight: 60%;\r\nwidth: .1rem;\r\nbackground-color: #D6D6D8;\r\nposition: absolute;\r\nleft: -5%;\r\ntop: 10%;\r\ntransform-origin: top left;\r\ntransform: rotate(-70deg) translateX(-50%);\r\n\r\n\r\n`","import styled from 'styled-components';\r\n\r\nexport const RightArm = styled.div`\r\nheight: 60%;\r\nwidth: .1rem;\r\nbackground-color: #D6D6D8;\r\nposition: absolute;\r\nleft: 50%;\r\ntop: 10%;\r\ntransform-origin: top left;\r\ntransform: rotate(70deg) translateX(-50%);\r\n\r\n\r\n`","import styled from 'styled-components';\r\n\r\nexport const LeftLeg = styled.div`\r\nheight: 60%;\r\nwidth: .1rem;\r\nbackground-color: #D6D6D8;\r\nposition: absolute;\r\nleft: -5%;\r\ntop: 70%;\r\ntransform-origin: top left;\r\ntransform: rotate(-30deg) translateX(-50%);`","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Head } from './HangmanParts/Head'\r\nimport { Body } from './HangmanParts/Body'\r\nimport { LeftArm } from './HangmanParts/LeftArm'\r\nimport { RightArm } from './HangmanParts/RightArm';\r\nimport { LeftLeg } from './HangmanParts/LeftLeg';\r\nconst HangmanDrawingWrapper = styled.div`\r\nflex-basis: 50%;\r\nbackground-color: #0B091F;\r\nposition: relative;\r\ntop: 0;\r\nleft:0;\r\n`\r\n\r\n\r\n\r\n\r\nconst hangmanDrawingSection = () => (\r\n    <HangmanDrawingWrapper>\r\n        <Head />\r\n        <Body>\r\n            <LeftArm />\r\n            <RightArm />\r\n            <LeftLeg />\r\n        </Body>\r\n    </HangmanDrawingWrapper>\r\n)\r\nexport default hangmanDrawingSection;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst GameInfoWrapper = styled.div`\r\nflex-basis: 50%;\r\nbackground-color: #D6D6D8;\r\ndisplay: flex;\r\njustify-content: center;\r\nalign-items: center;\r\ntext-align: center;\r\n&::after{\r\n    content: '';\r\n    position: absolute;\r\n    top: -20px;\r\n    left: calc(50% - 25px);\r\n    height: 120%;\r\n    background-color: #D6D6D8;\r\n    width: 30px;\r\n    transform: rotate(5deg);\r\n    transform-origin: 0 100%;\r\n}\r\n\r\ndiv{\r\n    flex-basis: 85%;\r\n    height: 100%;\r\n    /* background-color: red; */\r\n    display: flex;\r\n    flex-flow: column nowrap;\r\n    align-items: center;\r\n    justify-content: space-around;\r\n \r\n}\r\ndiv *{\r\n  letter-spacing: 1px;\r\n    color: #000;\r\n    margin-top: 5%;\r\n}\r\nem{\r\n    display: block;\r\n    width: 100%;\r\n}\r\n\r\n`\r\n\r\n\r\nconst GameInfoSection = ({ timeToNextLetter }) => {\r\n    return (\r\n        <GameInfoWrapper>\r\n            <div>\r\n\r\n                <h3>Category: <em>Famous Buildigings</em></h3>\r\n                <h4>Hint: <em>One of the highest bulding in the world</em></h4>\r\n                <h3>Next letter appears in: <em>{timeToNextLetter} s</em></h3>\r\n            </div>\r\n        </GameInfoWrapper>\r\n    );\r\n}\r\n\r\nexport default GameInfoSection;","import React from 'react';\r\nimport HangmanDrawing from './HangmanDrawing/HangmanDrawing';\r\nimport GameInfo from './GameInfo/GameInfo';\r\nimport styled from 'styled-components';\r\n\r\n\r\nconst DrawingAndInfoSectionWrapper = styled.div`\r\nflex-basis: 35%;\r\nwidth: 100%;\r\ndisplay: flex;\r\nflex-flow: row nowrap;\r\noverflow: hidden;\r\nposition: relative;\r\ntop: 0;\r\nleft: 0;\r\n\r\n`\r\nconst DrawingAndInfoSection = ({ timeToNextLetter }) => (\r\n    <DrawingAndInfoSectionWrapper>\r\n\r\n        <HangmanDrawing />\r\n        <GameInfo\r\n            timeToNextLetter={timeToNextLetter}\r\n        />\r\n    </DrawingAndInfoSectionWrapper>\r\n)\r\n\r\nexport default DrawingAndInfoSection;","import React, { Component } from 'react';\nimport PhraseToGuessSection from '../components/PhraseToGuessSection/PhraseToGuessSection';\nimport LettersToClickSection from '../components/LettersToClickSection/LettersToClickSection'\nimport Layout from '../components/Layout/Layout'\nimport DrawingAndInfoSectionWrapper from '../components/DrawingAndInfoSection/DrawingAndInfoSection';\nimport axios from 'axios'\n\nconst API = ' https://hangman-239ba.firebaseio.com/.json';\n\nclass App extends Component {\n\n  state = {\n\n    phraseToGuess: [],\n    lettersToClick: [\n      { letter: 'a', isClicked: false, isHit: false },\n      { letter: 'b', isClicked: false, isHit: false },\n      { letter: 'c', isClicked: false, isHit: false },\n      { letter: 'd', isClicked: false, isHit: false },\n      { letter: 'e', isClicked: false, isHit: false },\n      { letter: 'f', isClicked: false, isHit: false },\n      { letter: 'g', isClicked: false, isHit: false },\n      { letter: 'h', isClicked: false, isHit: false },\n      { letter: 'i', isClicked: false, isHit: false },\n      { letter: 'j', isClicked: false, isHit: false },\n      { letter: 'k', isClicked: false, isHit: false },\n      { letter: 'l', isClicked: false, isHit: false },\n      { letter: 'm', isClicked: false, isHit: false },\n      { letter: 'n', isClicked: false, isHit: false },\n      { letter: 'o', isClicked: false, isHit: false },\n      { letter: 'p', isClicked: false, isHit: false },\n      { letter: 'q', isClicked: false, isHit: false },\n      { letter: 'r', isClicked: false, isHit: false },\n      { letter: 's', isClicked: false, isHit: false },\n      { letter: 't', isClicked: false, isHit: false },\n      { letter: 'u', isClicked: false, isHit: false },\n      { letter: 'v', isClicked: false, isHit: false },\n      { letter: 'w', isClicked: false, isHit: false },\n      { letter: 'y', isClicked: false, isHit: false },\n      { letter: 'x', isClicked: false, isHit: false },\n      { letter: 'z', isClicked: false, isHit: false },\n    ],\n    mistakes: 0,\n    time: 0,\n    timeToNextLetter: 5,\n  }\n\n\n\n  // THESE TWO FUNCTION CAN BE ONE\n\n  pressLetterHandler = (playerLetter) => {\n    const { lettersToClick, } = this.state;\n    let phraseToGuess = this.state\n    const index = lettersToClick.findIndex(letterToClick => (\n      letterToClick.letter.toUpperCase() === playerLetter)\n    );\n    if (index === -1 || lettersToClick[index].isClicked) return\n    lettersToClick[index].isClicked = true\n\n    phraseToGuess = phraseToGuess.map(phrase => {\n      if (phrase.name === playerLetter) {\n        phrase.isShowed = true\n        lettersToClick[index].isHit = true\n\n      }\n    }\n    )\n    this.setState({ phraseToGuess, lettersToClick });\n\n  }\n\n  clickLetterHandler = (e) => {\n    const { lettersToClick, phraseToGuess, } = this.state\n    const target = e.target.textContent;\n\n    const index = lettersToClick.findIndex(letterToClick => (\n      letterToClick.letter.toUpperCase() === target.toUpperCase()\n    ));\n    lettersToClick[index].isClicked = true\n    phraseToGuess.map(phrase => {\n      if (phrase.name === target) {\n        phrase.isShowed = true;\n        lettersToClick[index].isHit = true;\n\n      }\n    }\n    )\n\n    this.setState({ phraseToGuess, lettersToClick });\n  }\n\n\n\n\n\n  componentWillUpdate() {\n    document.addEventListener(\"keypress\", (e) => this.pressLetterHandler(e.key.toUpperCase()))\n  }\n\n  componentDidMount() {\n    axios.get(API)\n      .then(response => response.statusText ? response : Error)\n      .then(response => {\n      })\n\n\n    const fetchedPhrase = 'Great Wall of China';\n    const { phraseToGuess } = this.state;\n    [...fetchedPhrase].map((phrase, index) => {\n      return phraseToGuess.push({\n        name: phrase.toUpperCase(),\n        id: index,\n        isShowed: false,\n      })\n    })\n    phraseToGuess.filter(phrase => (\n      phrase.name === \" \" || phrase.name === \",\" || phrase.name === \"-\" ? phrase.isShowed = true : phrase.isShowed = false)\n    )\n    this.setState({ phraseToGuess })\n\n  }\n\n\n  render() {\n    // console.log(this.state.timeToNextLetter);\n\n    const { phraseToGuess, lettersToClick, timeToNextLetter } = this.state\n    return (\n      <Layout>\n        <DrawingAndInfoSectionWrapper\n          timeToNextLetter={timeToNextLetter}\n        />\n        <PhraseToGuessSection\n\n          phraseToGuess={phraseToGuess}\n        />\n        <LettersToClickSection\n          lettersToClick={lettersToClick}\n          clickLetter={this.clickLetterHandler}\n        />\n      </Layout>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(< App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}